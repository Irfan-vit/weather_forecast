import { Directive, ViewContainerRef, ComponentFactoryResolver, Component, Input, ViewChild, ElementRef, Injectable, ɵɵdefineInjectable, ɵɵinject, EventEmitter, TemplateRef, NgZone, HostListener, VERSION, SecurityContext, Pipe, InjectionToken, Inject, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { createAnimation } from '@ionic/core';
import { Platform, MenuController, LoadingController, AlertController, ModalController, ActionSheetController, ToastController, NavController, IonInput } from '@ionic/angular';
import { __decorate, __metadata, __awaiter } from 'tslib';
import { LocalStorage, LocalStorageService } from 'ngx-webstorage';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import IMask from 'imask';
import { NavigationEnd, Router } from '@angular/router';
import { query, Client } from 'faunadb';
import { DomSanitizer } from '@angular/platform-browser';
import { registerWebPlugin, Plugins } from '@capacitor/core';
import { OAuth2Client } from '@byteowls/capacitor-oauth2';
import { database, firestore, auth } from 'firebase/app';
import { FirebaseApp } from '@angular/fire';
import { _firebaseAppFactory } from '@angular/fire/firebase.app.module';
import { AngularFireAuth, AngularFireAuthModule } from '@angular/fire/auth';
import { AngularFireDatabase } from '@angular/fire/database';
import { AngularFireStorage, AngularFireStorageModule } from '@angular/fire/storage';
import { AngularFirestore, AngularFirestoreModule } from '@angular/fire/firestore';
import { AngularFireMessaging, AngularFireMessagingModule } from '@angular/fire/messaging';
import { Md5 } from 'ts-md5';
import { CommonModule, DatePipe } from '@angular/common';
import { NgPipesModule, PluckPipe, OrderByPipe, ReversePipe, SumPipe, FilterByPipe, GroupByPipe } from 'ngx-pipes';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-container/ao-container.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOContainerDirective {
    /**
     * @param {?} _content
     * @param {?} _resolver
     */
    constructor(_content, _resolver) {
        this._content = _content;
        this._resolver = _resolver;
        this._component = null;
    }
    /**
     * @return {?}
     */
    component() {
        return this._component;
    }
    /**
     * @return {?}
     */
    content() {
        return this._content;
    }
    /**
     * @return {?}
     */
    clear() {
        this.content().clear();
    }
    /**
     * @param {?} component
     * @return {?}
     */
    open(component) {
        this.clear();
        this._component = this.content().createComponent(typeof component !== 'function' ? component : this._resolver.resolveComponentFactory(component));
        this._component.instance.directive = this;
        return this._component.instance;
    }
}
AOContainerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ao-container]'
            },] }
];
/** @nocollapse */
AOContainerDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOContainerDirective.prototype._component;
    /**
     * @type {?}
     * @private
     */
    AOContainerDirective.prototype._content;
    /**
     * @type {?}
     * @private
     */
    AOContainerDirective.prototype._resolver;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-container/ao-container.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function AOContainerInterface() { }
if (false) {
    /** @type {?} */
    AOContainerInterface.prototype.directive;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-container/ao-container.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOContainerComponent {
    /**
     * @param {?} _content
     */
    constructor(_content) {
        this._content = _content;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const animation = createAnimation()
            // .addElement(document.querySelector('section'))
            .addElement(this.tref.nativeElement.innerHTML)
            // .addElement(this.tref.)
            .easing("ease-in-out")
            .duration(1000)
            .direction("alternate")
            .iterations(Infinity)
            .fromTo('opacity', '0.0', '0.8')
            .keyframes([
            { offset: 0, transform: "scale(1)", opacity: "1" },
            { offset: 1, transform: "scale(1.5)", opacity: "0.5" }
        ]);
        animation.play();
    }
    /**
     * @return {?}
     */
    close() {
        this.directive.clear();
    }
}
AOContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'ao-container',
                template: "<div #tref>\r\n  <ion-backdrop (ionBackdropTap)=\"close()\" class=\"menu-type-overlay show-backdrop\"></ion-backdrop>\r\n\r\n  <section class=\"down\">\r\n\r\n    <div class=\"ion-page\">\r\n      <ion-header>\r\n        <ion-toolbar>\r\n          <ion-title>AOContainerComponent</ion-title>\r\n        </ion-toolbar>\r\n      </ion-header>\r\n      <ion-content>\r\n        <ion-button expand=\"block\" (click)=\"close()\">CLOSE</ion-button>\r\n      </ion-content>\r\n      <ion-footer>\r\n        <ion-toolbar>\r\n          <ion-title>AOContainerComponent</ion-title>\r\n        </ion-toolbar>\r\n      </ion-footer>\r\n    </div>\r\n\r\n  </section>\r\n</div>",
                styles: ["section{position:absolute;width:300px;height:400px;z-index:2}section.top{top:0;left:50%;margin-left:-150px}section.down{bottom:0;left:50%;margin-left:-150px}section.right{right:0;top:50%;margin-top:-200px}section.left{left:0;top:50%;margin-top:-200px}"]
            }] }
];
/** @nocollapse */
AOContainerComponent.ctorParameters = () => [
    { type: ViewContainerRef }
];
AOContainerComponent.propDecorators = {
    directive: [{ type: Input }],
    tref: [{ type: ViewChild, args: ["tref", { read: ElementRef, static: true },] }]
};
if (false) {
    /** @type {?} */
    AOContainerComponent.prototype.directive;
    /** @type {?} */
    AOContainerComponent.prototype.tref;
    /**
     * @type {?}
     * @private
     */
    AOContainerComponent.prototype._content;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-container/ao-container.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOContainerService {
    constructor() {
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} directive
     * @return {THIS}
     */
    init(directive) {
        (/** @type {?} */ (this))._directive = directive;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} component
     * @param {?=} data
     * @return {THIS}
     */
    open(component, data = {}) {
        /** @type {?} */
        const instance = (/** @type {?} */ (this))._directive.open(component);
        instance.data = data;
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    close() {
        (/** @type {?} */ (this))._directive.clear();
        return (/** @type {?} */ (this));
    }
}
AOContainerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOContainerService.ctorParameters = () => [];
/** @nocollapse */ AOContainerService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOContainerService_Factory() { return new AOContainerService(); }, token: AOContainerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOContainerService.prototype._directive;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-string.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AOString {
    /**
     * @param {?} text
     * @return {?}
     */
    static onlyNumbers(text) {
        return text.toString().replace(/\D/g, '');
    }
    /**
     * @param {?} text
     * @return {?}
     */
    static trim(text) {
        return text.toString().replace(/\s+/g, ' ').trim();
    }
    /**
     * @param {?} text
     * @return {?}
     */
    static readingTime(text) {
        return text.length * 0.2 * 1000;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    static slug(text) {
        return text.toString().toLowerCase()
            .replace(/[àÀáÁâÂãäÄÅåª]+/g, 'a') // Special Characters #1
            .replace(/[èÈéÉêÊëË]+/g, 'e') // Special Characters #2
            .replace(/[ìÌíÍîÎïÏ]+/g, 'i') // Special Characters #3
            .replace(/[òÒóÓôÔõÕöÖº]+/g, 'o') // Special Characters #4
            .replace(/[ùÙúÚûÛüÜ]+/g, 'u') // Special Characters #5
            .replace(/[ýÝÿŸ]+/g, 'y') // Special Characters #6
            .replace(/[ñÑ]+/g, 'n') // Special Characters #7
            .replace(/[çÇ]+/g, 'c') // Special Characters #8
            .replace(/[ß]+/g, 'ss') // Special Characters #9
            .replace(/[Ææ]+/g, 'ae') // Special Characters #10
            .replace(/[Øøœ]+/g, 'oe') // Special Characters #11
            .replace(/[%]+/g, 'pct') // Special Characters #12
            .replace(/\s+/g, '-') // Replace spaces with -
            .replace(/[^\w\-]+/g, '') // Remove all non-word chars
            .replace(/\-\-+/g, '-') // Replace multiple - with single -
            .replace(/^-+/, '') // Trim - from start of text
            .replace(/-+$/, ''); // Trim - from end of text;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    static keywords(text) {
        if (Array.isArray(text)) {
            text = text.join(' ');
        }
        return AOString.trim(text.toString())
            .split(' ')
            .map((/**
         * @param {?} part
         * @return {?}
         */
        part => AOString.slug(part)))
            .reduce((/**
         * @param {?} acc
         * @param {?} val
         * @return {?}
         */
        (acc, val) => acc.concat([val].concat(val.split('-')))), [])
            .filter((/**
         * @param {?} value
         * @param {?} index
         * @param {?} self
         * @return {?}
         */
        (value, index, self) => {
            return self.indexOf(value) === index;
        }));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-menu.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOMenuService {
    /**
     * @param {?} platform
     * @param {?} controller
     */
    constructor(platform, controller) {
        this.platform = platform;
        this.controller = controller;
        this._stacked = ['lg'];
    }
    /**
     * @return {?}
     */
    disable() {
        return this.controller.enable(false, 'AO_APP_MENU');
    }
    /**
     * @return {?}
     */
    enable() {
        return this.controller.enable(true, 'AO_APP_MENU');
    }
    /**
     * @return {?}
     */
    stackable() {
        return this.platform.width() > 991;
    }
    /**
     * @return {?}
     */
    stacked() {
        return this._stacked;
    }
    /**
     * @return {?}
     */
    stackToggle() {
        this._stacked = this._stacked == false ? ['lg'] : false;
    }
}
AOMenuService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOMenuService.ctorParameters = () => [
    { type: Platform },
    { type: MenuController }
];
/** @nocollapse */ AOMenuService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOMenuService_Factory() { return new AOMenuService(ɵɵinject(Platform), ɵɵinject(MenuController)); }, token: AOMenuService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOMenuService.prototype._stacked;
    /** @type {?} */
    AOMenuService.prototype.platform;
    /** @type {?} */
    AOMenuService.prototype.controller;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOService {
    /**
     * @param {?} platform
     * @param {?} ionLoading
     * @param {?} ionAlert
     * @param {?} ionModal
     * @param {?} ionSheet
     * @param {?} ionToast
     * @param {?} menu
     * @param {?} container
     */
    constructor(platform, ionLoading, ionAlert, ionModal, ionSheet, ionToast, menu, container) {
        this.platform = platform;
        this.ionLoading = ionLoading;
        this.ionAlert = ionAlert;
        this.ionModal = ionModal;
        this.ionSheet = ionSheet;
        this.ionToast = ionToast;
        this.menu = menu;
        this.container = container;
    }
    //--------------------------------------------------------------------------------------------------------------------
    // LOADING
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} promise
     * @param {?=} opts
     * @return {?}
     */
    wait(promise, opts = {}) {
        return this.ionLoading.create(Object.assign({ message: 'Carregando...' }, opts)).then((/**
         * @param {?} loading
         * @return {?}
         */
        loading => {
            return loading.present().then((/**
             * @return {?}
             */
            () => {
                promise.finally((/**
                 * @return {?}
                 */
                () => loading.dismiss()));
                return promise;
            }));
        }));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // DROPDOWN
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?=} buttons
     * @param {?=} opts
     * @return {?}
     */
    sheet(buttons = {}, opts = {}) {
        return this.ionSheet.create(Object.assign({ header: 'Opções...', buttons }, opts)).then((/**
         * @param {?} sheet
         * @return {?}
         */
        sheet => {
            return sheet.present().then((/**
             * @return {?}
             */
            () => {
                return sheet;
            }));
        }));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // MODAL
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} component
     * @param {?=} opts
     * @return {?}
     */
    modal(component, opts = {}) {
        return this.ionModal.create(Object.assign({ component }, opts)).then((/**
         * @param {?} modal
         * @return {?}
         */
        modal => {
            return modal.present().then((/**
             * @return {?}
             */
            () => {
                return modal;
            }));
        }));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // ALERT
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} message
     * @param {?=} opts
     * @return {?}
     */
    alert(message, opts = {}) {
        return this.ionAlert.create(Object.assign({ header: 'Atenção...', message, buttons: [
                { text: 'OK', role: 'OK' }
            ] }, opts)).then((/**
         * @param {?} alert
         * @return {?}
         */
        alert => {
            return alert.present().then((/**
             * @return {?}
             */
            () => {
                return alert.onDidDismiss();
            }));
        }));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // PROMPT
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} inputs
     * @param {?=} opts
     * @return {?}
     */
    prompt(inputs, opts = {}) {
        return this.alert('', Object.assign({ header: 'Preencha...', inputs, buttons: [
                { text: 'CANCELAR', role: 'CANCEL' },
                { text: 'OK', role: 'OK' }
            ] }, opts));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // CONFIRM
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} message
     * @param {?=} yes
     * @param {?=} no
     * @param {?=} opts
     * @return {?}
     */
    confirm(message, yes = (/**
     * @return {?}
     */
    () => null), no = (/**
     * @return {?}
     */
    () => null), opts = {}) {
        return this.alert(message, Object.assign({ header: 'Confirmação...', buttons: [
                { text: 'NÃO', role: 'NO' },
                { text: 'SIM', role: 'YES' }
            ] }, opts)).then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            response.role == 'YES' ? yes() : no();
            return response;
        }));
    }
    /**
     * @param {?=} yes
     * @param {?=} no
     * @param {?=} opts
     * @return {?}
     */
    confirmOperation(yes = (/**
     * @return {?}
     */
    () => null), no = (/**
     * @return {?}
     */
    () => null), opts = {}) {
        return this.confirm('Deseja realmente <b>realizar</b> esta operação?', yes, no, opts);
    }
    /**
     * @param {?=} yes
     * @param {?=} no
     * @param {?=} opts
     * @return {?}
     */
    confirmActivate(yes = (/**
     * @return {?}
     */
    () => null), no = (/**
     * @return {?}
     */
    () => null), opts = {}) {
        return this.confirm('Deseja realmente <b>ativar</b> este item?', yes, no, opts);
    }
    /**
     * @param {?=} yes
     * @param {?=} no
     * @param {?=} opts
     * @return {?}
     */
    confirmDeactivate(yes = (/**
     * @return {?}
     */
    () => null), no = (/**
     * @return {?}
     */
    () => null), opts = {}) {
        return this.confirm('Deseja realmente <b>desativar</b> este item?', yes, no, opts);
    }
    /**
     * @param {?=} yes
     * @param {?=} no
     * @param {?=} opts
     * @return {?}
     */
    confirmDestroy(yes = (/**
     * @return {?}
     */
    () => null), no = (/**
     * @return {?}
     */
    () => null), opts = {}) {
        return this.confirm('Deseja realmente <b>excluir</b> este item?', yes, no, opts);
    }
    //--------------------------------------------------------------------------------------------------------------------
    // TOAST
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} message
     * @param {?=} opts
     * @return {?}
     */
    toast(message, opts = {}) {
        return this.ionToast.create(Object.assign({ message, duration: AOString.readingTime(message) }, opts)).then((/**
         * @param {?} toast
         * @return {?}
         */
        toast => {
            return toast.present().then((/**
             * @return {?}
             */
            () => {
                return toast.onDidDismiss();
            }));
        }));
    }
    /**
     * @param {?} message
     * @param {?=} opts
     * @return {?}
     */
    info(message, opts = {}) {
        //console.info(message);
        return this.toast(message, Object.assign({ color: 'tertiary' }, opts));
    }
    /**
     * @param {?} message
     * @param {?=} opts
     * @return {?}
     */
    success(message, opts = {}) {
        //console.log(message);
        return this.toast(message, Object.assign({ color: 'success' }, opts));
    }
    /**
     * @param {?} message
     * @param {?=} opts
     * @return {?}
     */
    warning(message, opts = {}) {
        console.warn(message);
        return this.toast(message, Object.assign({ color: 'warning' }, opts));
    }
    /**
     * @param {?} message
     * @param {?=} opts
     * @return {?}
     */
    danger(message, opts = {}) {
        console.error(message, opts.error);
        return this.toast(message, Object.assign({ color: 'danger' }, opts));
    }
}
AOService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOService.ctorParameters = () => [
    { type: Platform },
    { type: LoadingController },
    { type: AlertController },
    { type: ModalController },
    { type: ActionSheetController },
    { type: ToastController },
    { type: AOMenuService },
    { type: AOContainerService }
];
/** @nocollapse */ AOService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOService_Factory() { return new AOService(ɵɵinject(Platform), ɵɵinject(LoadingController), ɵɵinject(AlertController), ɵɵinject(ModalController), ɵɵinject(ActionSheetController), ɵɵinject(ToastController), ɵɵinject(AOMenuService), ɵɵinject(AOContainerService)); }, token: AOService, providedIn: "root" });
if (false) {
    /** @type {?} */
    AOService.prototype.platform;
    /** @type {?} */
    AOService.prototype.ionLoading;
    /** @type {?} */
    AOService.prototype.ionAlert;
    /** @type {?} */
    AOService.prototype.ionModal;
    /** @type {?} */
    AOService.prototype.ionSheet;
    /** @type {?} */
    AOService.prototype.ionToast;
    /** @type {?} */
    AOService.prototype.menu;
    /** @type {?} */
    AOService.prototype.container;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ao-app/ao-app.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOAppComponent {
    /**
     * @param {?} ao
     */
    constructor(ao) {
        this.ao = ao;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AOAppComponent.decorators = [
    { type: Component, args: [{
                selector: 'ao-app',
                template: "<ion-app>\n  <ion-split-pane contentId=\"AO_APP_CONTENT\" [when]=\"ao.menu.stacked()\">\n\n    <ion-menu menuId=\"AO_APP_MENU\" contentId=\"AO_APP_CONTENT\" type=\"overlay\">\n      <ion-header>\n\n        <ng-content select=\"[slot=header]\"></ng-content>\n\n      </ion-header>\n      <ion-content>\n\n        <ng-content select=\"[slot=menu]\"></ng-content>\n\n      </ion-content>\n      <ion-header>\n\n        <ng-content select=\"[slot=footer]\"></ng-content>\n\n      </ion-header>\n    </ion-menu>\n\n    <ion-router-outlet id=\"AO_APP_CONTENT\"></ion-router-outlet>\n\n  </ion-split-pane>\n</ion-app>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
AOAppComponent.ctorParameters = () => [
    { type: AOService }
];
if (false) {
    /** @type {?} */
    AOAppComponent.prototype.ao;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ao-menu/ao-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOMenuComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AOMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ao-menu',
                template: "<aside class=\"ao-screen ao-menu\">\r\n  <div class=\"ao-screen-body-fixed\">\r\n\r\n    <div class=\"ao-screen ao-screen-row\">\r\n      <div class=\"ao-screen-header ao-menu-icons\">\r\n\r\n        <div class=\"ao-screen ao-screen-relative\">\r\n          <div class=\"ao-screen-body\">\r\n            <ng-content select=\"[slot=top-icons]\"></ng-content>\r\n          </div>\r\n          <div class=\"ao-screen-footer\">\r\n            <ng-content select=\"[slot=down-icons]\"></ng-content>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      <div class=\"ao-screen-body-fixed ao-menu-list\">\r\n\r\n        <div class=\"ao-screen ao-screen-relative\">\r\n          <div class=\"ao-screen-body\">\r\n            <ng-content select=\"[slot=top-list]\"></ng-content>\r\n          </div>\r\n          <div class=\"ao-screen-footer\">\r\n            <ng-content select=\"[slot=down-list]\"></ng-content>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</aside>",
                styles: [":host ::ng-deep ion-list{padding:0;background:0 0}:host ::ng-deep ion-item{--background:none}:host ::ng-deep .ao-screen{background:0 0}:host ::ng-deep .ao-menu{background:rgba(0,0,0,.05)}:host ::ng-deep .ao-menu-icons{background:rgba(0,0,0,.05)}:host ::ng-deep .ao-menu-icons ion-buttons{flex-direction:column}:host ::ng-deep .ao-menu-icons .ao-screen{width:56px}"]
            }] }
];
/** @nocollapse */
AOMenuComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-auth.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AOAuthService {
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} _nav
     * @param {?} _ao
     */
    constructor(_nav, _ao) {
        this._nav = _nav;
        this._ao = _ao;
        this._redirect_default = '/';
        this.redirect = (/**
         * @return {?}
         */
        () => this._redirect);
        this.user = (/**
         * @return {?}
         */
        () => this._user);
        // -------------------------------------------------------------------------------------------------------------------
        this.isUser = (/**
         * @return {?}
         */
        () => !!this._user);
        this.isGuest = (/**
         * @return {?}
         */
        () => !this._user);
        this.id = (/**
         * @return {?}
         */
        () => this.isUser() ? this.user().id : null);
        this.name = (/**
         * @return {?}
         */
        () => this.isUser() ? this.user().name : null);
        this.email = (/**
         * @return {?}
         */
        () => this.isUser() ? this.user().email : null);
        this.image = (/**
         * @return {?}
         */
        () => this.isUser() ? this.user().image : null);
        this.verified = (/**
         * @return {?}
         */
        () => this.isUser() ? this.user().verified : null);
        this.permitions = (/**
         * @return {?}
         */
        () => this.isUser() ? this.user().permitions : null);
        // -------------------------------------------------------------------------------------------------------------------
        this.onLogin = (/**
         * @return {?}
         */
        () => AOAuthService._onLogin);
        this.onLogout = (/**
         * @return {?}
         */
        () => AOAuthService._onLogout);
        this.onChange = (/**
         * @return {?}
         */
        () => AOAuthService._onChange);
        AOAuthService._onChange = new BehaviorSubject(this.user());
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?=} provider
     * @return {?}
     */
    provider(provider = null) {
        if (provider == null) {
            return this._provider;
        }
        this._provider = provider;
        return this;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} redirect
     * @return {THIS}
     */
    setRedirect(redirect) {
        (/** @type {?} */ (this))._redirect = redirect;
        return (/** @type {?} */ (this));
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} user
     * @return {THIS}
     */
    setUser(user) {
        (/** @type {?} */ (this))._user = user;
        (/** @type {?} */ (this)).onChange().next((/** @type {?} */ (this))._user);
        return (/** @type {?} */ (this));
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} data
     * @return {?}
     */
    login(data) {
        return this._ao.wait(this.provider().login(data)).then((/**
         * @param {?} user
         * @return {?}
         */
        (user) => {
            this.setUser(user);
            this.onLogin().emit();
            /** @type {?} */
            const redirect = this._redirect && this._redirect !== '/login'
                ? this._redirect
                : this._redirect_default;
            this._redirect = null;
            return this._nav.navigateRoot(redirect);
        }));
    }
    /**
     * @return {?}
     */
    logout() {
        return this._ao.wait(this.provider().logout()).then((/**
         * @return {?}
         */
        () => {
            this.setUser(null);
            this.onLogout();
            return this._nav.navigateRoot('/login');
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    update(data) {
        return this._ao.wait(this.provider().update(data));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updatePassword(data) {
        return this._ao.wait(this.provider().updatePassword(data));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    forgetPassword(data) {
        return this._ao.wait(this.provider().forgetPassword(data));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resetPassword(data) {
        return this._ao.wait(this.provider().resetPassword(data));
    }
}
AOAuthService._onLogin = new EventEmitter();
AOAuthService._onLogout = new EventEmitter();
AOAuthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOAuthService.ctorParameters = () => [
    { type: NavController },
    { type: AOService }
];
/** @nocollapse */ AOAuthService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOAuthService_Factory() { return new AOAuthService(ɵɵinject(NavController), ɵɵinject(AOService)); }, token: AOAuthService, providedIn: "root" });
__decorate([
    LocalStorage('user'),
    __metadata("design:type", Object)
], AOAuthService.prototype, "_user", void 0);
__decorate([
    LocalStorage('redirect'),
    __metadata("design:type", String)
], AOAuthService.prototype, "_redirect", void 0);
if (false) {
    /** @type {?} */
    AOAuthService._onLogin;
    /** @type {?} */
    AOAuthService._onLogout;
    /** @type {?} */
    AOAuthService._onChange;
    /**
     * @type {?}
     * @private
     */
    AOAuthService.prototype._user;
    /**
     * @type {?}
     * @private
     */
    AOAuthService.prototype._redirect;
    /**
     * @type {?}
     * @private
     */
    AOAuthService.prototype._redirect_default;
    /**
     * @type {?}
     * @private
     */
    AOAuthService.prototype._provider;
    /** @type {?} */
    AOAuthService.prototype.redirect;
    /** @type {?} */
    AOAuthService.prototype.user;
    /** @type {?} */
    AOAuthService.prototype.isUser;
    /** @type {?} */
    AOAuthService.prototype.isGuest;
    /** @type {?} */
    AOAuthService.prototype.id;
    /** @type {?} */
    AOAuthService.prototype.name;
    /** @type {?} */
    AOAuthService.prototype.email;
    /** @type {?} */
    AOAuthService.prototype.image;
    /** @type {?} */
    AOAuthService.prototype.verified;
    /** @type {?} */
    AOAuthService.prototype.permitions;
    /** @type {?} */
    AOAuthService.prototype.onLogin;
    /** @type {?} */
    AOAuthService.prototype.onLogout;
    /** @type {?} */
    AOAuthService.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    AOAuthService.prototype._nav;
    /**
     * @type {?}
     * @private
     */
    AOAuthService.prototype._ao;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-subscriptions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOSubscriptions {
    constructor() {
        this.add = (/**
         * @template THIS
         * @this {THIS}
         * @param {?} name
         * @param {?} subscription
         * @return {THIS}
         */
        (name, subscription) => {
            this[name] = subscription;
            return this;
        });
        this.stop = (/**
         * @template THIS
         * @this {THIS}
         * @param {?=} names
         * @return {THIS}
         */
        (names = null) => {
            Object.keys(this).filter((/**
             * @param {?} name
             * @return {?}
             */
            name => ['add', 'stop'].indexOf(name) == -1)).forEach((/**
             * @param {?} name
             * @return {?}
             */
            name => {
                if (names === null || names.indexOf(name + '') >= 0) {
                    this[name].unsubscribe();
                }
            }));
            return this;
        });
        /** @type {?} */
        const handler = {
            /**
             * @param {?} obj
             * @param {?} prop
             * @param {?} value
             * @return {?}
             */
            set(obj, prop, value) {
                if (obj[prop] && obj[prop].unsubscribe) {
                    obj[prop].unsubscribe();
                }
                Reflect.set(obj, prop, value);
                return value;
            }
        };
        return new Proxy(this, handler);
    }
}
if (false) {
    /** @type {?} */
    AOSubscriptions.prototype.add;
    /** @type {?} */
    AOSubscriptions.prototype.stop;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-is-guest/ao-is-guest.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOIsGuestDirective {
    /**
     * @param {?} _element
     * @param {?} _templateRef
     * @param {?} _viewContainer
     * @param {?} _zone
     */
    constructor(_element, _templateRef, _viewContainer, _zone) {
        this._element = _element;
        this._templateRef = _templateRef;
        this._viewContainer = _viewContainer;
        this._zone = _zone;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._subscriptions.add('status', AOAuthService._onChange.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        status => {
            this._zone.run((/**
             * @return {?}
             */
            () => {
                status
                    ? this._viewContainer.clear()
                    : this._viewContainer.createEmbeddedView(this._templateRef);
            }));
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscriptions.stop();
    }
}
AOIsGuestDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ao-is-guest]'
            },] }
];
/** @nocollapse */
AOIsGuestDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NgZone }
];
AOIsGuestDirective.propDecorators = {
    aoIsGuest: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._subscriptions;
    /** @type {?} */
    AOIsGuestDirective.prototype.aoIsGuest;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._templateRef;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._zone;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-is-user/ao-is-user.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOIsUserDirective {
    /**
     * @param {?} _element
     * @param {?} _templateRef
     * @param {?} _viewContainer
     * @param {?} _zone
     */
    constructor(_element, _templateRef, _viewContainer, _zone) {
        this._element = _element;
        this._templateRef = _templateRef;
        this._viewContainer = _viewContainer;
        this._zone = _zone;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._subscriptions.add('status', AOAuthService._onChange.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        status => {
            this._zone.run((/**
             * @return {?}
             */
            () => {
                status
                    ? this._viewContainer.createEmbeddedView(this._templateRef)
                    : this._viewContainer.clear();
            }));
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscriptions.stop();
    }
}
AOIsUserDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ao-is-user]'
            },] }
];
/** @nocollapse */
AOIsUserDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NgZone }
];
AOIsUserDirective.propDecorators = {
    aoIsUser: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._subscriptions;
    /** @type {?} */
    AOIsUserDirective.prototype.aoIsUser;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._templateRef;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._zone;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-stop-propagation/ao-stop-propagation.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOStopPropagationDirective {
    constructor() {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    click($event) {
        $event.stopPropagation();
    }
}
AOStopPropagationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ao-stop-propagation]'
            },] }
];
/** @nocollapse */
AOStopPropagationDirective.ctorParameters = () => [];
AOStopPropagationDirective.propDecorators = {
    click: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-mask/ao-mask.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOMaskDirective {
    /**
     * @param {?} ionInput
     */
    constructor(ionInput) {
        this.ionInput = ionInput;
        this._masks = {
            zipCode: {
                mask: '00.000-000'
            },
            cnpj: {
                mask: '00.000.000/0000-00'
            },
            cpf: {
                mask: '000.000.000-00'
            },
            cpfCnpj: {
                mask: [
                    { mask: '000.000.000-00' },
                    { mask: '00.000.000/0000-00' }
                ]
            },
            phone: {
                mask: [
                    { mask: '(00) 0000-0000' },
                    { mask: '(00) 0-0000-0000' }
                ]
            },
            date: {
                mask: Date,
                pattern: 'DD/MM/YYYY',
                blocks: {
                    DD: { mask: IMask.MaskedRange, from: 1, to: 31, maxLength: 2 },
                    MM: { mask: IMask.MaskedRange, from: 1, to: 12, maxLength: 2 },
                    YYYY: { mask: IMask.MaskedRange, from: 1900, to: 9999, maxLength: 4 }
                },
                format: (/**
                 * @param {?} date
                 * @return {?}
                 */
                function (date) {
                    /** @type {?} */
                    let day = date.getDate().toString().padStart(2, 0);
                    /** @type {?} */
                    let month = (date.getMonth() + 1).toString().padStart(2, 0);
                    /** @type {?} */
                    let year = date.getFullYear();
                    return [day, month, year].join('/');
                }),
                parse: (/**
                 * @param {?} str
                 * @return {?}
                 */
                function (str) {
                    /** @type {?} */
                    const parts = str.split('/');
                    return new Date(parts[2], parts[1] - 1, parts[0]);
                }),
            },
            decimal: {
                mask: Number,
                thousandsSeparator: '.',
                scale: 2,
                signed: false,
                padFractionalZeros: false,
                normalizeZeros: true,
                radix: ',',
                mapToRadix: ['.'],
            },
            int: {
                mask: Number,
                thousandsSeparator: '.',
                scale: 0,
                signed: false,
            }
        };
        this._destroyed = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const element = yield this.ionInput.getInputElement();
            /** @type {?} */
            const formatter = IMask(element, this.options());
            // formatter.value
            // formatter.unmaskedValue
            // formatter.typedValue = '+55 (61) 1234-5678'
            this.ionInput.value = element.value;
            formatter.updateValue();
            /** @type {?} */
            let count = 0;
            this.ionInput.ionChange
                .pipe(takeUntil(this._destroyed))
                .subscribe((/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                // event.detail.value
                this.ionInput.value = element.value;
                if (count == 0) {
                    formatter.updateValue();
                    count++;
                }
            }));
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyed.next();
    }
    /**
     * @private
     * @return {?}
     */
    options() {
        if (typeof this.mask == 'string') {
            /** @type {?} */
            let options = { mask: this.mask };
            if (this._masks[this.mask]) {
                options = this._masks[this.mask];
            }
            if (this.min !== undefined) {
                options.min = this.min;
            }
            if (this.max !== undefined) {
                options.max = this.max;
            }
            if (this.min < 0 || this.max < 0) {
                options.signed = true;
            }
            return options;
        }
        return this.mask;
    }
}
AOMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ao-mask]',
                providers: [IonInput],
            },] }
];
/** @nocollapse */
AOMaskDirective.ctorParameters = () => [
    { type: IonInput }
];
AOMaskDirective.propDecorators = {
    mask: [{ type: Input, args: ['ao-mask',] }],
    min: [{ type: Input, args: ['ao-min',] }],
    max: [{ type: Input, args: ['ao-max',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype._masks;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype.mask;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype.min;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype.max;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype._destroyed;
    /** @type {?} */
    AOMaskDirective.prototype.ionInput;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/guards/ao-guest.guard.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOGuestGuard {
    /**
     * @param {?} _router
     * @param {?} _nav
     * @param {?} _zone
     * @param {?} _auth
     */
    constructor(_router, _nav, _zone, _auth) {
        this._router = _router;
        this._nav = _nav;
        this._zone = _zone;
        this._auth = _auth;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return this.can(route, state);
    }
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    canActivateChild(childRoute, state) {
        return this.can(childRoute, state);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    can(route, state) {
        if (this._auth.isUser() && state.url !== '/login') {
            return this._router.createUrlTree(['/']);
        }
        this._subscriptions.add('login', AOAuthService._onLogin.subscribe((/**
         * @return {?}
         */
        () => {
            this._subscriptions.stop();
            this._zone.run((/**
             * @return {?}
             */
            () => {
                this._nav.navigateRoot('/');
            }));
        })));
        this._subscriptions.add('route', this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationEnd && event.url !== state.url) {
                this._subscriptions.stop();
            }
        })));
        return true;
    }
}
AOGuestGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AOGuestGuard.ctorParameters = () => [
    { type: Router },
    { type: NavController },
    { type: NgZone },
    { type: AOAuthService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._router;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._nav;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._auth;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/guards/ao-user.guard.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOUserGuard {
    /**
     * @param {?} _router
     * @param {?} _nav
     * @param {?} _zone
     * @param {?} _auth
     */
    constructor(_router, _nav, _zone, _auth) {
        this._router = _router;
        this._nav = _nav;
        this._zone = _zone;
        this._auth = _auth;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return this.can(route, state);
    }
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    canActivateChild(childRoute, state) {
        return this.can(childRoute, state);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    can(route, state) {
        if (this._auth.isGuest()) {
            this._auth.setRedirect(state.url);
            return this._router.createUrlTree(['/login']);
        }
        this._subscriptions.add('logout', AOAuthService._onLogout.subscribe((/**
         * @return {?}
         */
        () => {
            this._subscriptions.stop();
            this._zone.run((/**
             * @return {?}
             */
            () => {
                this._nav.navigateRoot('/login');
            }));
        })));
        this._subscriptions.add('route', this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationEnd && event.url !== state.url) {
                this._subscriptions.stop();
            }
        })));
        return true;
    }
}
AOUserGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AOUserGuard.ctorParameters = () => [
    { type: Router },
    { type: NavController },
    { type: NgZone },
    { type: AOAuthService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._router;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._nav;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._auth;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/ao-faunadb-pagination.helper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOFaunaDBPaginationHelper {
    /**
     * @param {?} _ao
     * @param {?} _db
     */
    constructor(_ao, _db) {
        this._ao = _ao;
        this._db = _db;
        this._filters_show = true;
        this._filters_model = {};
        this._filters = {};
        this._size = 20;
    }
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?=} filters
     * @return {?}
     */
    filters(filters) {
        if (filters) {
            this._filters_model = Object.assign({}, filters);
            this._filters = Object.assign({}, filters);
            return this;
        }
        return this._filters;
    }
    /**
     * @return {?}
     */
    openFilters() {
        this._filters_show = true;
    }
    /**
     * @return {?}
     */
    closeFilters() {
        this._filters_show = false;
    }
    /**
     * @return {?}
     */
    toggleFilters() {
        this._filters_show = !this._filters_show;
    }
    /**
     * @return {?}
     */
    showFilters() {
        return this._filters_show;
    }
    /**
     * @return {?}
     */
    hideFilters() {
        return !this._filters_show;
    }
    /**
     * @return {?}
     */
    hasFilters() {
        return Object
            .keys(this._filters_model)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        key => this._filters_model[key] !== this._filters[key]))
            .length > 0;
    }
    /**
     * @return {?}
     */
    resetFilters() {
        this._filters = Object.assign({}, this._filters_model);
        this.openFilters();
    }
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columns
     * @return {THIS}
     */
    select(columns) {
        return ((/** @type {?} */ (this))._columns = [...columns]) && (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} query
     * @return {THIS}
     */
    query(query) {
        return ((/** @type {?} */ (this))._query = query) && (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    search() {
        this._last_after = undefined;
        this._refresh = undefined;
        this._search = this._query(query, Object.assign({}, this.filters()));
        return this.first();
    }
    /**
     * @return {?}
     */
    first() {
        return this.paginate(this._search, {
            size: this._size,
            before: undefined,
            after: undefined,
        });
    }
    /**
     * @return {?}
     */
    previous() {
        return this.paginate(this._search, {
            size: this._size,
            after: undefined,
            before: this._response.before,
        });
    }
    /**
     * @return {?}
     */
    next() {
        return this.paginate(this._search, {
            size: this._size,
            after: this._response.after,
            before: undefined,
        });
    }
    /**
     * @return {?}
     */
    last() {
        return this.paginate(this._search, {
            size: this._size,
            after: this._last_after,
            before: undefined,
        });
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    refresh(event) {
        /** @type {?} */
        let promise;
        if (this.empty()) {
            if (this._response) {
                promise = this.previous();
            }
            else {
                promise = this.search();
            }
        }
        else {
            promise = this.paginate(this._search, this._refresh);
        }
        return promise.then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            event ? event.target.complete() : null;
            return response;
        }));
    }
    /**
     * @private
     * @param {?} set
     * @param {?=} opts
     * @return {?}
     */
    paginate(set, opts) {
        this._refresh = Object.assign({}, opts);
        /** @type {?} */
        let paginate = query.Paginate(set, opts);
        if (this._columns) {
            paginate = query.Map(paginate, (/**
             * @param {?} item
             * @return {?}
             */
            item => this._columns.reduce((/**
             * @param {?} select
             * @param {?} column
             * @param {?} index
             * @return {?}
             */
            (select, column, index) => (select[column] = query.Select(index + 1, item)) && select), {})));
        }
        return this._db.query((/**
         * @return {?}
         */
        () => paginate))
            .then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (this._response && this._response.after && !response.after) {
                this._last_after = this._response.after;
            }
            this._response = response;
            this.closeFilters();
        })).catch((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this._ao.danger('Oops! Falha ao realizar a buscar :(', { error });
        }));
    }
    /**
     * @return {?}
     */
    hasPrevious() {
        return !!(this._response && this._response.before);
    }
    /**
     * @return {?}
     */
    hasNext() {
        return !!(this._response && this._response.after);
    }
    /**
     * @return {?}
     */
    hasLast() {
        return !!this._last_after;
    }
    /**
     * @return {?}
     */
    isFirst() {
        return !this.hasPrevious();
    }
    /**
     * @return {?}
     */
    isLast() {
        return !this.hasNext();
    }
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    response() {
        return this._response ? this._response : null;
    }
    /**
     * @return {?}
     */
    items() {
        return this._response && this._response.data ? this._response.data : [];
    }
    /**
     * @return {?}
     */
    empty() {
        return this.items().length === 0;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._filters_show;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._filters_model;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._query;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._search;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._size;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._response;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._last_after;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._refresh;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._ao;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._db;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/ao-tree.helpers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AONodeItem {
    constructor() {
        this.level = 0;
        this.expanded = false;
    }
    /**
     * @return {?}
     */
    isExpanded() {
        return this.expanded;
    }
    /**
     * @return {?}
     */
    isExpandable() {
        return this.children.length > 0;
    }
}
if (false) {
    /** @type {?} */
    AONodeItem.prototype.data;
    /** @type {?} */
    AONodeItem.prototype.level;
    /** @type {?} */
    AONodeItem.prototype.children;
    /** @type {?} */
    AONodeItem.prototype.expanded;
}
class AOTreeHelper {
    /**
     * @param {?} _zone
     */
    constructor(_zone) {
        this._zone = _zone;
        this.map = new Map();
        this.tree = [];
    }
    //--------------------------------------------------------------------------------------------------------------------
    // STATIC METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @param {?=} map
     * @param {?=} fk_name
     * @param {?=} pk_name
     * @return {?}
     */
    static listToTree(items, map, fk_name = 'parent_id', pk_name = 'id') {
        //
        // inicializa o map, se ainda nao tiver sido inicializado
        //
        if (map == undefined) {
            map = new Map();
        }
        //
        // funcao para criar todos os nodes necessarios
        //
        /** @type {?} */
        const create = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            let node = map.get(data[pk_name]);
            if (node == undefined) {
                node = new AONodeItem();
            }
            node.data = data;
            node.children = [];
            map.set(data[pk_name], node);
            return node;
        });
        //
        // aninha todos os nodes do map
        //
        /** @type {?} */
        const nest = (/**
         * @param {?} root
         * @param {?} node
         * @return {?}
         */
        (root, node) => {
            /** @type {?} */
            const parent = node.data[fk_name] ? map.get(node.data[fk_name]) : undefined;
            if (parent) {
                node.level = parent.level + 1;
                parent.children.push(node);
            }
            else {
                root.push(node);
            }
            return root;
        });
        return {
            map, tree: items.map(create).reduce(nest, [])
        };
    }
    /**
     * @param {?} tree
     * @return {?}
     */
    static flatTree(tree) {
        /** @type {?} */
        const flat = (/**
         * @param {?} nodes
         * @param {?} node
         * @return {?}
         */
        (nodes, node) => {
            nodes.push(node);
            return node.children.length > 0
                ? node.children.reduce(flat, nodes)
                : nodes;
        });
        return tree.reduce(flat, []);
    }
    //--------------------------------------------------------------------------------------------------------------------
    // OBJECT METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @return {?}
     */
    setItems(items) {
        this._zone.run((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const response = AOTreeHelper.listToTree(items, this.map);
            this.map = response.map;
            this.tree = response.tree;
        }));
    }
    /**
     * @return {?}
     */
    getRoot() {
        return this.tree;
    }
    ;
    /**
     * @param {?=} node
     * @return {?}
     */
    getChildren(node) {
        return node ? node.children : this.getRoot();
    }
    ;
    /**
     * @param {?=} node
     * @return {?}
     */
    getDescendants(node) {
        return AOTreeHelper.flatTree(node ? node.children : this.getRoot());
    }
    ;
    /**
     * @param {?} node
     * @return {?}
     */
    getParent(node) {
        return this.map.get(node.data.parent_id);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getParents(node) {
        /** @type {?} */
        const parent = this.getParent(node);
        return parent ? [parent, ...this.getParents(parent)] : [];
    }
    /**
     * @param {?=} node
     * @return {?}
     */
    getBrothers(node) {
        /** @type {?} */
        const parent = this.getParent(node);
        return parent ? parent.children : this.getRoot();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isVisible(node) {
        /** @type {?} */
        const parent = this.getParent(node);
        return parent ? parent.expanded : true;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    tootle(node) {
        if (node.expanded) {
            [node, ...this.getDescendants(node)].map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.expanded = false));
        }
        else {
            node.expanded = true;
        }
        return node.expanded;
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.getDescendants().map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.expanded = true));
    }
    /**
     * @return {?}
     */
    contractAll() {
        this.getDescendants().map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.expanded = false));
    }
    /**
     * @param {?=} node
     * @return {?}
     */
    getNextOrder(node) {
        /** @type {?} */
        const children = this.getChildren(node);
        return children.length === 0 ? 0 : children.slice(-1)[0].data.order + 1;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getNavigate(node) {
        /** @type {?} */
        const brothers = this.getBrothers(node);
        /** @type {?} */
        const locate = (/**
         * @param {?} navigate
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (navigate, item, index) => {
            if (node.data.id === item.data.id) {
                navigate.previous = index > 0 ? brothers[index - 1] : null;
                navigate.next = index < brothers.length ? brothers[index + 1] : null;
            }
            return navigate;
        });
        return brothers.reduce(locate, { previous: null, current: node, next: null });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getPrevious(node) {
        return this.getNavigate(node).previous;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getNext(node) {
        return this.getNavigate(node).next;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype.map;
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype.tree;
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype._zone;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/interfaces/ao-module-env.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function AOModuleEnvInterface() { }
if (false) {
    /** @type {?} */
    AOModuleEnvInterface.prototype.production;
    /** @type {?} */
    AOModuleEnvInterface.prototype.faunadb;
    /** @type {?} */
    AOModuleEnvInterface.prototype.firebase;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ao-ln2br.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AONl2BrPipe {
    /**
     * @param {?} _sanitizer
     */
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} value
     * @param {?=} sanitizeBeforehand
     * @return {?}
     */
    transform(value, sanitizeBeforehand) {
        /** @type {?} */
        const parsed = value.replace(/(?:\r\n|\r|\n)/g, '<br />');
        if (!VERSION || VERSION.major === '2') {
            return this._sanitizer.bypassSecurityTrustHtml(parsed);
        }
        else if (sanitizeBeforehand) {
            return this._sanitizer.sanitize(SecurityContext.HTML, parsed);
        }
        return parsed;
    }
}
AONl2BrPipe.decorators = [
    { type: Pipe, args: [{
                name: 'AONl2br'
            },] }
];
/** @nocollapse */
AONl2BrPipe.ctorParameters = () => [
    { type: DomSanitizer }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AONl2BrPipe.prototype._sanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase-connection.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOFirebaseConnectionService {
    /**
     * @param {?} _name
     * @param {?} _hash
     * @param {?} _app
     * @param {?} _zone
     */
    constructor(_name, _hash, _app, _zone) {
        this._name = _name;
        this._hash = _hash;
        this._app = _app;
        this._zone = _zone;
        this._configs = {};
    }
    /**
     * @return {?}
     */
    app() {
        return this._app;
    }
    /**
     * @return {?}
     */
    name() {
        return this._name;
    }
    /**
     * @return {?}
     */
    hash() {
        return this._hash;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    auth() {
        return this._auth
            ? this._auth
            : this._auth = new AngularFireAuth(this._configs, this._name, null, this._zone);
    }
    /**
     * @return {?}
     */
    database() {
        return this._database
            ? this._database
            : this._database = new AngularFireDatabase(this._configs, this._name, null, null, this._zone);
    }
    /**
     * @return {?}
     */
    firestore() {
        return this._firestore
            ? this._firestore
            : this._firestore = new AngularFirestore(this._configs, this._name, null, null, null, this._zone, null);
    }
    /**
     * @return {?}
     */
    messaging() {
        return this._messaging
            ? this._messaging
            : this._messaging = new AngularFireMessaging(this._configs, this._name, null, this._zone);
    }
    /**
     * @return {?}
     */
    storage() {
        return this._storage
            ? this._storage
            : this._storage = new AngularFireStorage(this._configs, this._name, null, null, this._zone);
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._auth) {
                try {
                    yield this._auth.auth.signOut();
                }
                catch (e) {
                    console.warn('Oops! Failed to run signOut.');
                }
            }
            return Promise.resolve(true);
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.logout();
            yield this._app.delete();
            return Promise.resolve(true);
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFirebaseConnectionService.prototype._configs;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseConnectionService.prototype._auth;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseConnectionService.prototype._database;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseConnectionService.prototype._firestore;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseConnectionService.prototype._messaging;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseConnectionService.prototype._storage;
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseConnectionService.prototype._name;
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseConnectionService.prototype._hash;
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseConnectionService.prototype._app;
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseConnectionService.prototype._zone;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-env.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const AOEnvService = new InjectionToken('AOModuleEnvInterface');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOFirebaseFactoryService {
    /**
     * @param {?} _app
     * @param {?} _zone
     * @param {?} _environment
     */
    constructor(_app, _zone, _environment) {
        this._app = _app;
        this._zone = _zone;
        this._environment = _environment;
        this.connections = {};
        this.factory(this._environment.firebase.name, this._environment.firebase.configs, this._app);
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    conn(name) {
        if (this.connections[name]) {
            return this.connections[name];
        }
        throw new Error('FirebaseApp(' + name + ') not found.');
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    makeHash(configs) {
        return JSON.stringify({
            projectId: configs.projectId,
            apiKey: configs.apiKey
        });
    }
    /**
     * @param {?} name
     * @param {?=} configs
     * @param {?=} app
     * @return {?}
     */
    factory(name, configs, app) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const hash = this.makeHash(configs);
            if (this.connections[name]) {
                if (this.connections[name].hash() === hash) {
                    return Promise.resolve(true);
                }
                else {
                    yield this.connections[name].destroy();
                }
            }
            if (!app) {
                app = _firebaseAppFactory((/** @type {?} */ (configs)), this._zone, name);
            }
            this.connections[name] = new AOFirebaseConnectionService(name, hash, app, this._zone);
            return Promise.resolve(true);
        });
    }
    /**
     * @param {?=} only
     * @param {?=} except
     * @return {?}
     */
    destroy(only = [], except = ['master']) {
        return __awaiter(this, void 0, void 0, function* () {
            if (only.length === 0) {
                only = Object.keys(this.connections);
            }
            /** @type {?} */
            const promises = [];
            Object.keys(this.connections).forEach((/**
             * @param {?} name
             * @return {?}
             */
            name => {
                if (only.indexOf(name) >= 0 && except.indexOf(name) === -1) {
                    promises.push(this.conn(name).destroy());
                }
            }));
            return Promise.all(promises).then((/**
             * @return {?}
             */
            () => true));
        });
    }
}
AOFirebaseFactoryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOFirebaseFactoryService.ctorParameters = () => [
    { type: FirebaseApp },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
];
/** @nocollapse */ AOFirebaseFactoryService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOFirebaseFactoryService_Factory() { return new AOFirebaseFactoryService(ɵɵinject(FirebaseApp), ɵɵinject(NgZone), ɵɵinject(AOEnvService)); }, token: AOFirebaseFactoryService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype.connections;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._app;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._environment;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOFirebaseService {
    /**
     * @param {?} _firebase
     */
    constructor(_firebase) {
        this._firebase = _firebase;
        this._name = 'master';
    }
    /**
     * @return {?}
     */
    firebase() {
        return this._firebase;
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    factory(configs) {
        return this._firebase.factory(this.name(), configs);
    }
    /**
     * @return {?}
     */
    conn() {
        return this._firebase.conn(this.name());
    }
    /**
     * @return {?}
     */
    name() {
        return this._name;
    }
    /**
     * @return {?}
     */
    hash() {
        return this.conn().hash();
    }
    /**
     * @return {?}
     */
    app() {
        return this.conn().app();
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    auth() {
        return this.conn().auth();
    }
    /**
     * @return {?}
     */
    authState() {
        return this.auth().authState;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    db() {
        return this.conn().database();
    }
    /**
     * @return {?}
     */
    dbNow() {
        return database.ServerValue.TIMESTAMP;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    fs() {
        return this.conn().firestore();
    }
    /**
     * @return {?}
     */
    fsId() {
        return this.fs().createId();
    }
    /**
     * @template T
     * @param {?} path
     * @return {?}
     */
    fsDoc(path) {
        return this.fs().doc(path);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    fsDocValue(path) {
        return this.fsDoc(path).valueChanges();
    }
    /**
     * @param {?} path
     * @return {?}
     */
    fsDocSnapshot(path) {
        return this.fs().doc(path).snapshotChanges();
    }
    /**
     * @param {?} path
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    fsDocSet(path, data, options = { merge: true }) {
        return this.fs().doc(path).set(data, options);
    }
    /**
     * @template T
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsCol(path, queryFn) {
        return this.fs().collection(path, queryFn);
    }
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsColValues(path, queryFn) {
        return this.fsCol(path, queryFn).valueChanges();
    }
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsColSnapshot(path, queryFn) {
        return this.fsCol(path, queryFn).snapshotChanges();
    }
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsColState(path, queryFn) {
        return this.fsCol(path, queryFn).stateChanges();
    }
    /**
     * @return {?}
     */
    fsBatch() {
        return this.fs().firestore.batch();
    }
    /**
     * @return {?}
     */
    fsNow() {
        return firestore.FieldValue.serverTimestamp();
    }
    /**
     * @return {?}
     */
    fsTimestamp() {
        return firestore.Timestamp;
    }
    // fsToMilliseconds(item, field) {
    //   if (item[field] instanceof Timestamp) {
    //     item[field] = (new Date(item[field].seconds * 1000 + item[field].nanoseconds / 1000000)).getTime();
    //   }
    // }
    // fsAddMilliseconds(date) {
    //   date.milliseconds = (new Date(date.seconds * 1000 + date.nanoseconds / 1000000)).getTime();
    //   return date;
    // }
    // fsTransaction<T>(updateFunction: (transaction: firebase.firestore.Timestamp) => Promise<T>): Promise<T> {
    //   return this.fs().firestore.runTransaction(updateFunction);
    // }
    // fsCounter(path, field = 'count', qt = 1) {
    //   return this.fsTransaction(transaction => {
    //     const ref = this.fsDoc(path).ref;
    //     return transaction.get(ref).then((doc) => {
    //
    //       const update = {};
    //
    //       if (doc.exists) {
    //         const value = parseInt(doc.get(field), 10);
    //         qt = value >= 0 || value <= 0 ? qt + value : qt;
    //       }
    //
    //       update[field] = qt;
    //
    //       transaction.set(ref, update, {merge: true});
    //
    //     });
    //   });
    // }
    // fsUp(path, field = 'count') {
    //   return this.fsCounter(path, field, 1);
    // }
    // fsDown(path, field = 'count') {
    //   return this.fsCounter(path, field, -1);
    // }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    msn() {
        return this.conn().messaging();
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    disk() {
        return this.conn().storage();
    }
}
AOFirebaseService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOFirebaseService.ctorParameters = () => [
    { type: AOFirebaseFactoryService }
];
/** @nocollapse */ AOFirebaseService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOFirebaseService_Factory() { return new AOFirebaseService(ɵɵinject(AOFirebaseFactoryService)); }, token: AOFirebaseService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseService.prototype._name;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseService.prototype._firebase;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-auth-firebase.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOAuthFirebaseService {
    /**
     * @param {?} _auth
     * @param {?} _fb
     * @param {?} _env
     */
    constructor(_auth, _fb, _env) {
        this._auth = _auth;
        this._fb = _fb;
        this._env = _env;
        this._subscriptions = new AOSubscriptions();
        registerWebPlugin(OAuth2Client);
        this._auth.provider(this);
        this._auth.isUser() ? this.authListening() : null;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} data
     * @return {?}
     */
    login(data) {
        this._subscriptions.stop();
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                let oauth = null;
                /** @type {?} */
                let credential = null;
                if (data.provider instanceof auth.GoogleAuthProvider) {
                    oauth = yield this.loginGoogle();
                    credential = auth.GoogleAuthProvider.credential(null, oauth.access_token);
                }
                else if (data.provider instanceof auth.FacebookAuthProvider) {
                    oauth = yield this.loginFacebook();
                    credential = auth.FacebookAuthProvider.credential(oauth.access_token);
                }
                else if (data.provider instanceof auth.TwitterAuthProvider) {
                    oauth = yield this.loginTwitter();
                    credential = auth.TwitterAuthProvider.credential(oauth.access_token, '');
                }
                else if (data.provider instanceof auth.GithubAuthProvider) {
                    oauth = yield this.loginGithub();
                    credential = auth.GithubAuthProvider.credential(oauth.access_token);
                }
                else {
                    reject('Invalid Auth Provider.');
                }
                /** @type {?} */
                const auth$1 = yield this._fb.auth().auth.signInWithCredential(credential);
                /** @type {?} */
                const user = yield this.userCreateOrUpdate(auth$1.user, {
                    given_name: oauth.given_name,
                    family_name: oauth.family_name,
                    locale: oauth.locale,
                });
                resolve(user);
            }
            catch (e) {
                reject(e);
            }
        })));
        promise.finally((/**
         * @return {?}
         */
        () => this.authListening(true)));
        return promise;
    }
    /**
     * @return {?}
     */
    logout() {
        this._subscriptions.stop();
        return this._fb.firebase().destroy().then((/**
         * @return {?}
         */
        () => this._fb.conn().logout()));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    update(data) {
        return Promise.resolve();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    forgetPassword(data) {
        return Promise.resolve();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resetPassword(data) {
        return Promise.resolve();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updatePassword(data) {
        return Promise.resolve();
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    loginGoogle() {
        return Plugins.OAuth2Client.authenticate({
            scope: 'email profile',
            authorizationBaseUrl: 'https://accounts.google.com/o/oauth2/auth',
            resourceUrl: 'https://www.googleapis.com/userinfo/v2/me',
            accessTokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token',
            web: {
                appId: this._env.oauth.google.web,
                responseType: 'token',
                redirectUrl: this._env.app_url,
                accessTokenEndpoint: '',
                pkceEnable: false,
                windowOptions: 'height=500,left=0,top=0',
            },
            android: {
                appId: this._env.oauth.google.android,
                responseType: 'code',
                // if you configured a android app in google dev console the value must be "code"
                redirectUrl: this._env.app_id + ':/' // package name from google dev console
            },
            ios: {
                appId: this._env.oauth.google.ios,
                responseType: 'code',
                // if you configured a ios app in google dev console the value must be "code"
                redirectUrl: this._env.app_id + ':/' // Bundle ID from google dev console
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    loginFacebook() {
        return this.loginGoogle();
    }
    /**
     * @private
     * @return {?}
     */
    loginTwitter() {
        return this.loginGoogle();
    }
    /**
     * @private
     * @return {?}
     */
    loginGithub() {
        return this.loginGoogle();
    }
    /**
     * @private
     * @param {?=} skip
     * @return {?}
     */
    authListening(skip = false) {
        this._subscriptions.stop();
        this._subscriptions.auth = this._fb.authState().subscribe((/**
         * @param {?} auth
         * @return {?}
         */
        (auth) => __awaiter(this, void 0, void 0, function* () {
            if (auth) {
                if (skip === false) {
                    skip = false;
                    yield this.userCreateOrUpdate(auth);
                }
                this._subscriptions.user = this._fb.fsDocSnapshot('/users/' + auth.uid).subscribe((/**
                 * @param {?} snapshot
                 * @return {?}
                 */
                snapshot => {
                    return snapshot.payload.exists
                        ? this._auth.setUser(snapshot.payload.data())
                        : this._auth.logout();
                }), (/**
                 * @return {?}
                 */
                () => {
                    console.warn('Oops! Failed to watch user.');
                }));
            }
            else {
                return this._auth.logout();
            }
        })), (/**
         * @return {?}
         */
        () => {
            console.warn('Oops! Failed to update authentication.');
        }));
    }
    /**
     * @private
     * @param {?} user
     * @param {?=} extra
     * @return {?}
     */
    userCreateOrUpdate(user, extra = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const userRef = this._fb.fsDoc('/users/' + user.uid);
            /** @type {?} */
            const userDoc = yield userRef.ref.get();
            /** @type {?} */
            const data = Object.assign({}, userDoc.data(), { id: user.uid, email: user.email, email_verified: user.emailVerified, name: user.displayName, image: user.photoURL, logged_at: this._fb.fsNow() }, extra);
            if (!userDoc.exists) {
                data.active = true;
                data.created_at = this._fb.fsNow();
                data.updated_at = this._fb.fsNow();
                data.deleted_at = null;
            }
            yield userRef.set(data, { merge: true });
            return (yield userRef.ref.get()).data();
        });
    }
}
AOAuthFirebaseService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOAuthFirebaseService.ctorParameters = () => [
    { type: AOAuthService },
    { type: AOFirebaseService },
    { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
];
/** @nocollapse */ AOAuthFirebaseService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOAuthFirebaseService_Factory() { return new AOAuthFirebaseService(ɵɵinject(AOAuthService), ɵɵinject(AOFirebaseService), ɵɵinject(AOEnvService)); }, token: AOAuthFirebaseService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._auth;
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._fb;
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._env;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-auth-oauth.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOAuthOauthService {
}
AOAuthOauthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ AOAuthOauthService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOAuthOauthService_Factory() { return new AOAuthOauthService(); }, token: AOAuthOauthService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-auth-provider.interface.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function AOAuthProviderInterface() { }
if (false) {
    /**
     * @param {?} data
     * @return {?}
     */
    AOAuthProviderInterface.prototype.login = function (data) { };
    /**
     * @return {?}
     */
    AOAuthProviderInterface.prototype.logout = function () { };
    /**
     * @param {?} data
     * @return {?}
     */
    AOAuthProviderInterface.prototype.update = function (data) { };
    /**
     * @param {?} data
     * @return {?}
     */
    AOAuthProviderInterface.prototype.forgetPassword = function (data) { };
    /**
     * @param {?} data
     * @return {?}
     */
    AOAuthProviderInterface.prototype.resetPassword = function (data) { };
    /**
     * @param {?} data
     * @return {?}
     */
    AOAuthProviderInterface.prototype.updatePassword = function (data) { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-cache.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @Injectable({
//   providedIn: 'root'
// })
class AOCacheService {
    /**
     * @param {?} _db
     * @param {?} _storage
     */
    constructor(_db, _storage) {
        this._db = _db;
        this._storage = _storage;
        this._configs = {
            type: 'full',
            // none|local|server|full
            expire: ((24 * 60 * 60) * 1000),
            metadata: {},
        };
    }
    /**
     * @param {?} params
     * @param {?} request
     * @param {?=} configs
     * @return {?}
     */
    find(params, request, configs = {}) {
        configs = (typeof configs === 'object') ? Object.assign({}, this._configs, configs) : Object.assign({}, this._configs);
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            params = JSON.stringify(params);
            /** @type {?} */
            const key = Md5.hashStr(params);
            /** @type {?} */
            const cached = yield this.get(key, configs);
            if (cached) {
                return resolve(cached);
            }
            request().then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => __awaiter(this, void 0, void 0, function* () {
                yield this.set(key, params, response, configs);
                return resolve(response);
            })));
        })));
    }
    /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    get(key, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Cache::get', key);
            /** @type {?} */
            const response = this._storage.retrieve(key);
            /** @type {?} */
            const response_updated_at = this._storage.retrieve(key + '_updated_at');
            if (response != null
                && response_updated_at != null
                && (Date.now() - response_updated_at) <= configs.expire) {
                return JSON.parse(response);
            }
            return yield this.getInServer(key, configs);
        });
    }
    /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    getInServer(key, configs) {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let cached = null;
            try {
                cached = yield this._db.query((/**
                 * @param {?} q
                 * @return {?}
                 */
                q => q.Get(q.Match(q.Index('cache_by_key'), key))));
            }
            catch (e) {
                return null;
            }
            this._storage.store(key, cached.data.response);
            this._storage.store(key + '_updated_at', cached.data.updated_at);
            if ((Date.now() - cached.data.updated_at) > configs.expire) {
                return null;
            }
            return JSON.parse(cached.data.response);
        });
    }
    /**
     * @param {?} key
     * @param {?} request
     * @param {?} response
     * @param {?} configs
     * @return {?}
     */
    set(key, request, response, configs) {
        /** @type {?} */
        const data = {
            key,
            request,
            response: JSON.stringify(response),
            updated_at: Date.now(),
            metadata: configs.metadata
        };
        this._storage.store(key, data.response);
        this._storage.store(key + '_updated_at', data.updated_at);
        return this.setInServer(key, data);
    }
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    setInServer(key, data) {
        return this._db.query((/**
         * @param {?} q
         * @return {?}
         */
        q => q.If(q.Exists(q.Match(q.Index('cache_by_key'), key)), q.Update(q.Select(['ref'], q.Get(q.Match(q.Index('cache_by_key'), key))), { data: Object.assign({}, data) }), q.Create(q.Collection('cache'), { data: Object.assign({}, data, { created_at: Date.now() }) }))));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._configs;
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._db;
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._storage;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-fauna-db.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const _q = query;
// @dynamic
class AOFaunaDbService {
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} _ao
     * @param {?} _storage
     * @param {?} _environment
     */
    constructor(_ao, _storage, _environment) {
        this._ao = _ao;
        this._storage = _storage;
        this._environment = _environment;
        this.q = _q;
        this._observer = new EventEmitter();
        this._cache = new AOCacheService(this, this._storage);
        this._client = new Client({
            secret: this._environment.faunadb.secret,
            observer: (/**
             * @param {?} res
             * @return {?}
             */
            (res) => this._observer.emit(res))
        });
    }
    /**
     * @return {?}
     */
    client() {
        return this._client;
    }
    //--------------------------------------------------------------------------------------------------------------------
    // EXPRESSION
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} table
     * @param {?=} id
     * @return {?}
     */
    Ref(table, id) {
        return id ? _q.Ref(_q.Collection(table), id) : null;
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    Get(table, id) {
        return _q.Get(_q.Ref(_q.Collection(table), id));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?=} id
     * @return {?}
     */
    Create(table, data, id = null) {
        return _q.Let({
            id: id ? id : _q.NewId()
        }, _q.Create(_q.Ref(_q.Collection(table), _q.Var('id')), {
            data: Object.assign({ is_activated: true }, data, { id: _q.Var('id'), created_at: Date.now(), updated_at: Date.now(), deleted_at: null })
        }));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?} id
     * @return {?}
     */
    Update(table, data, id) {
        return _q.Update(_q.Ref(_q.Collection(table), id), {
            data: Object.assign({}, data, { id, updated_at: Date.now() })
        });
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    Delete(table, id) {
        return _q.Delete(_q.Ref(_q.Collection(table), id));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // RESOURCES
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} callback
     * @param {?=} configs
     * @return {?}
     */
    query(callback, configs = {}) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const params = callback(_q);
            /** @type {?} */
            const request = configs.cache
                ? this._cache.find(params, (/**
                 * @return {?}
                 */
                () => this.client().query(params)), configs.cache)
                : this.client().query(params);
            request.then((/**
             * @param {?} response
             * @return {?}
             */
            response => resolve(response)), (/**
             * @param {?} error
             * @return {?}
             */
            error => reject(error)));
        })));
        return this._ao.wait(promise);
    }
    /**
     * @return {?}
     */
    id() {
        return this.query((/**
         * @param {?} q
         * @return {?}
         */
        q => q.NewId()));
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    find(table, id) {
        return this.query((/**
         * @return {?}
         */
        () => this.Get(table, id)));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?=} id
     * @return {?}
     */
    insert(table, data, id = null) {
        return this.query((/**
         * @return {?}
         */
        () => this.Create(table, data, id)));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?} id
     * @return {?}
     */
    upgrade(table, data, id) {
        return this.query((/**
         * @return {?}
         */
        () => this.Update(table, data, id)));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @return {?}
     */
    save(table, data) {
        return data.id
            ? this.upgrade(table, data, data.id)
            : this.insert(table, data);
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    destroy(table, id) {
        return this.query((/**
         * @return {?}
         */
        () => this.Delete(table, id)));
    }
}
AOFaunaDbService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOFaunaDbService.ctorParameters = () => [
    { type: AOService },
    { type: LocalStorageService },
    { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
];
/** @nocollapse */ AOFaunaDbService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOFaunaDbService_Factory() { return new AOFaunaDbService(ɵɵinject(AOService), ɵɵinject(LocalStorageService), ɵɵinject(AOEnvService)); }, token: AOFaunaDbService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._client;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._cache;
    /** @type {?} */
    AOFaunaDbService.prototype.q;
    /** @type {?} */
    AOFaunaDbService.prototype._observer;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._ao;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._storage;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._environment;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase-slave.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOFirebaseSlaveService extends AOFirebaseService {
    constructor() {
        super(...arguments);
        this._name = 'slave';
    }
}
AOFirebaseSlaveService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ AOFirebaseSlaveService.ngInjectableDef = ɵɵdefineInjectable({ factory: function AOFirebaseSlaveService_Factory() { return new AOFirebaseSlaveService(ɵɵinject(AOFirebaseFactoryService)); }, token: AOFirebaseSlaveService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseSlaveService.prototype._name;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-array.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AOArray {
    /**
     * @param {?} items
     * @return {?}
     */
    static flat(items) {
        return items.reduce((/**
         * @param {?} acc
         * @param {?} val
         * @return {?}
         */
        (acc, val) => Array.isArray(val) ? acc.concat(this.flat(val)) : acc.concat(val)), []);
    }
    /**
     * @param {?} array
     * @return {?}
     */
    static distict(array) {
        return array.filter((/**
         * @param {?} value
         * @param {?} index
         * @param {?} self
         * @return {?}
         */
        (value, index, self) => {
            return self.indexOf(value) === index;
        }));
    }
    /**
     * @param {?} items
     * @return {?}
     */
    static slug(items) {
        return items.map((/**
         * @param {?} item
         * @return {?}
         */
        item => AOString.slug(item)));
    }
    /**
     * @param {?} items
     * @return {?}
     */
    static keywords(items) {
        return this.distict(this.flat(items).reduce((/**
         * @param {?} acc
         * @param {?} val
         * @return {?}
         */
        (acc, val) => acc.concat(AOString.keywords(val))), []));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-fake.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AOFake {
    /**
     * @param {?} value
     * @param {?=} decimals
     * @return {?}
     */
    static floorDecimal(value, decimals = 2) {
        return Math.floor(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @param {?=} decimals
     * @return {?}
     */
    static randomFloat(min = 0, max = 100, decimals = 2) {
        return Math.floor((min + (Math.random() * (max - min))) * Math.pow(10, decimals)) / Math.pow(10, decimals);
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomInteger(min = 0, max = 100) {
        return Math.floor((min + (Math.random() * (max - min))) * Math.pow(10, 0)) / Math.pow(10, 0);
    }
    /**
     * @param {?=} chars
     * @return {?}
     */
    static randomChar(chars = 'qwertyuiopasdfghjklzxcvbnm1234567890') {
        return chars.charAt(this.randomInteger(0, chars.length - 1));
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomWord(min = 1, max = 10) {
        /** @type {?} */
        const size = this.randomInteger(min, max);
        /** @type {?} */
        let word = '';
        while (word.length < size) {
            word += this.randomChar();
        }
        return word;
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomWords(min = 1, max = 10) {
        /** @type {?} */
        const qt = this.randomInteger(min, max);
        /** @type {?} */
        const words = [];
        while (words.length < qt) {
            words.push(this.randomWord());
        }
        return words.join(' ');
    }
    /**
     * @param {?=} fator
     * @return {?}
     */
    static randomBoolean(fator = 50) {
        return this.randomInteger() <= fator;
    }
    /**
     * @param {?} elements
     * @return {?}
     */
    static randomElement(elements) {
        return elements[this.randomInteger(0, elements.length - 1)];
    }
    /**
     * @param {?} elements
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomElements(elements, min = 1, max = null) {
        min = min && min > 1 ? Math.floor(min) : 1;
        max = max && max < elements.length ? Math.floor(max) : this.randomInteger(min, elements.length - 1);
        /** @type {?} */
        const qt = this.randomInteger(min, max);
        /** @type {?} */
        const selection = [];
        while (selection.length < qt) {
            selection.push(this.randomElement(elements));
        }
        return selection;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-validations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AOValidations {
    /**
     * @param {?} value
     * @return {?}
     */
    static isEmail(value) {
        return /^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isFloat(value) {
        return /^-?[\d]+(\.?\d+)?$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isFloat_S(value) {
        return /^-[\d]+(\.?\d+)?$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isFloat_U(value) {
        return /^[\d]+(\.?\d+)?$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isInt(value) {
        return /^-?[\d]+$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isInt_S(value) {
        return /^-[\d]+$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isInt_U(value) {
        return /^[\d]+$/.test(value);
    }
    //
    // (99) 9999-9999
    // (99) 9-9999-9999
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isPhone(value) {
        if (/^\([1-9]{1}[0-9]{1}\) ([0-9]{1}-|)[0-9]{4}-[0-9]{4}$/.test(value) == false)
            return false;
        value = AOString.onlyNumbers(value);
        if (['10', '20', '30', '40', '50', '60', '70', '80', '90'].indexOf(value.substr(0, 2)) >= 0)
            return false;
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isPhoneINTER(value) {
        return /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im.test(value);
    }
    //
    // 99.999-999
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isZipCode(value) {
        return /^[0-9]{2}\.[0-9]{3}-[0-9]{3}$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isZipCodeINTER(value) {
        return /^[0-9]{5}(?:-[0-9]{4})?$/.test(value);
    }
    //
    // 999.999.999-99
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isCpf(value) {
        if (/^[0-9]{3}\.[0-9]{3}\.[0-9]{3}-[0-9]{2}$/.test(value) == false)
            return false;
        /** @type {?} */
        const invalided = [
            '00000000000', '11111111111', '22222222222', '33333333333', '44444444444',
            '55555555555', '66666666666', '77777777777', '88888888888', '99999999999'
        ];
        value = AOString.onlyNumbers(value);
        if (!value || value.length != 11 || invalided.indexOf(value) >= 0)
            return false;
        /** @type {?} */
        let soma = 0;
        /** @type {?} */
        let resto;
        for (let i = 1; i <= 9; i++)
            soma = soma + parseInt(value.substring(i - 1, i)) * (11 - i);
        resto = (soma * 10) % 11;
        if ((resto == 10) || (resto == 11))
            resto = 0;
        if (resto != parseInt(value.substring(9, 10)))
            return false;
        soma = 0;
        for (let i = 1; i <= 10; i++)
            soma = soma + parseInt(value.substring(i - 1, i)) * (12 - i);
        resto = (soma * 10) % 11;
        if ((resto == 10) || (resto == 11))
            resto = 0;
        if (resto != parseInt(value.substring(10, 11)))
            return false;
        return true;
    }
    //
    // 99.999.999/9999-99
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isCnpj(value) {
        if (/^[0-9]{2}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}-[0-9]{2}$/.test(value) == false)
            return false;
        /** @type {?} */
        const invalided = [
            '00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444',
            '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'
        ];
        value = AOString.onlyNumbers(value);
        if (!value || value.length != 14 || invalided.indexOf(value) >= 0)
            return false;
        /** @type {?} */
        let soma = 0;
        /** @type {?} */
        let tamanho = value.length - 2;
        /** @type {?} */
        let numeros = value.substring(0, tamanho);
        /** @type {?} */
        let digitos = value.substring(tamanho);
        /** @type {?} */
        let pos = tamanho - 7;
        for (let i = tamanho; i >= 1; i--) {
            soma += numeros.charAt(tamanho - i) * pos--;
            if (pos < 2)
                pos = 9;
        }
        /** @type {?} */
        let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
        if (resultado != digitos.charAt(0))
            return false;
        soma = 0;
        tamanho = tamanho + 1;
        numeros = value.substring(0, tamanho);
        pos = tamanho - 7;
        for (let i = tamanho; i >= 1; i--) {
            soma += numeros.charAt(tamanho - i) * pos--;
            if (pos < 2)
                pos = 9;
        }
        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
        if (resultado != digitos.charAt(1))
            return false;
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isCpfCnpj(value) {
        return AOValidations.isCpf(value) || AOValidations.isCnpj(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isUrl(value) {
        return /^(http?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?'\\+&%$#=~_-]+))*$/
            .test(value);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-validators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class AOValidators {
    /**
     * @param {?} control
     * @return {?}
     */
    static touched(control) {
        if (control.pristine) {
            return true;
        }
        control.markAsTouched();
        return false;
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    static custom(callback) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        control => {
            return AOValidators.touched(control) || callback(control.value) ? null : { invalidCustom: true };
        });
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} control
     * @return {?}
     */
    static email(control) {
        return AOValidators.touched(control) || AOValidations.isEmail(control.value) ? null : { invalidEmail: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static url(control) {
        return AOValidators.touched(control) || AOValidations.isUrl(control.value) ? null : { invalidUrl: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static phone(control) {
        return AOValidators.touched(control) || AOValidations.isPhone(control.value) ? null : { invalidPhone: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static phoneINTER(control) {
        return AOValidators.touched(control) || AOValidations.isPhoneINTER(control.value) ? null : { invalidPhone: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static zipCode(control) {
        return AOValidators.touched(control) || AOValidations.isZipCode(control.value) ? null : { invalidZip: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static zipCodeINTER(control) {
        return AOValidators.touched(control) || AOValidations.isZipCodeINTER(control.value) ? null : { invalidZip: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static cpf(control) {
        return AOValidators.touched(control) || AOValidations.isCpf(control.value) ? null : { invalidZip: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static cnpj(control) {
        return AOValidators.touched(control) || AOValidations.isCnpj(control.value) ? null : { invalidZip: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static cpfCnpj(control) {
        return AOValidators.touched(control) || AOValidations.isCpfCnpj(control.value) ? null : { invalidZip: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static float(control) {
        return AOValidators.touched(control) || AOValidations.isFloat(control.value) ? null : { invalidNumber: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static floatSigned(control) {
        return AOValidators.touched(control) || AOValidations.isFloat_S(control.value) ? null : { invalidNumber: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static floatUnsigned(control) {
        return AOValidators.touched(control) || AOValidations.isFloat_U(control.value) ? null : { invalidNumber: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static int(control) {
        return AOValidators.touched(control) || AOValidations.isInt(control.value) ? null : { invalidNumber: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static intSigned(control) {
        return AOValidators.touched(control) || AOValidations.isInt_S(control.value) ? null : { invalidNumber: true };
    }
    /**
     * @param {?} control
     * @return {?}
     */
    static intUnsigned(control) {
        return AOValidators.touched(control) || AOValidations.isInt_U(control.value) ? null : { invalidNumber: true };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ao.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AOModule {
    /**
     * @param {?} environment
     * @return {?}
     */
    static forRoot(environment) {
        return {
            ngModule: AOModule,
            providers: [
                {
                    provide: AOEnvService,
                    useValue: environment,
                }
            ]
        };
    }
}
AOModule.decorators = [
    { type: NgModule, args: [{
                schemas: [
                    CUSTOM_ELEMENTS_SCHEMA
                ],
                imports: [
                    CommonModule,
                    NgPipesModule,
                    // ChartsModule,
                    AngularFireAuthModule,
                    AngularFirestoreModule,
                    AngularFireStorageModule,
                    AngularFireMessagingModule,
                ],
                exports: [
                    //
                    // MODULES
                    //
                    NgPipesModule,
                    // ChartsModule,
                    AngularFireAuthModule,
                    AngularFirestoreModule,
                    AngularFireStorageModule,
                    AngularFireMessagingModule,
                    //
                    // COMPONENTS
                    //
                    AOAppComponent,
                    AOMenuComponent,
                    AOContainerComponent,
                    //
                    // DIRECTIVES
                    //
                    AOContainerDirective,
                    AOIsUserDirective,
                    AOIsGuestDirective,
                    AOStopPropagationDirective,
                    AOMaskDirective,
                    //
                    // PIPES
                    //
                    AONl2BrPipe,
                    PluckPipe,
                    DatePipe,
                    OrderByPipe,
                    ReversePipe,
                    SumPipe,
                    FilterByPipe,
                    GroupByPipe,
                ],
                declarations: [
                    //
                    // COMPONENTS
                    //
                    AOAppComponent,
                    AOMenuComponent,
                    AOContainerComponent,
                    //
                    // DIRECTIVES
                    //
                    AOContainerDirective,
                    AOIsUserDirective,
                    AOIsGuestDirective,
                    AOStopPropagationDirective,
                    AOMaskDirective,
                    //
                    // PIPES
                    //
                    AONl2BrPipe,
                ],
                providers: [
                    //
                    // GUARDS
                    //
                    AOUserGuard,
                    AOGuestGuard,
                    //
                    // PIPES
                    //
                    AONl2BrPipe,
                    PluckPipe,
                    DatePipe,
                    OrderByPipe,
                    ReversePipe,
                    SumPipe,
                    FilterByPipe,
                    GroupByPipe,
                ],
                entryComponents: [
                    AOContainerComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ao-angular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AOAppComponent, AOArray, AOAuthFirebaseService, AOAuthOauthService, AOAuthService, AOCacheService, AOContainerComponent, AOContainerDirective, AOContainerService, AOEnvService, AOFake, AOFaunaDBPaginationHelper, AOFaunaDbService, AOFirebaseConnectionService, AOFirebaseFactoryService, AOFirebaseService, AOFirebaseSlaveService, AOGuestGuard, AOIsGuestDirective, AOIsUserDirective, AOMaskDirective, AOMenuComponent, AOMenuService, AOModule, AONl2BrPipe, AONodeItem, AOService, AOStopPropagationDirective, AOString, AOSubscriptions, AOTreeHelper, AOUserGuard, AOValidations, AOValidators };
//# sourceMappingURL=ao-angular.js.map
