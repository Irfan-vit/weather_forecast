/**
 * @fileoverview added by tsickle
 * Generated from: lib/guards/ao-guest.guard.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { NavController } from '@ionic/angular';
import { AOAuthService } from '../services/ao-auth.service';
import { AOSubscriptions } from '../utils/ao-subscriptions';
var AOGuestGuard = /** @class */ (function () {
    function AOGuestGuard(_router, _nav, _zone, _auth) {
        this._router = _router;
        this._nav = _nav;
        this._zone = _zone;
        this._auth = _auth;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AOGuestGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.can(route, state);
    };
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    AOGuestGuard.prototype.canActivateChild = /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    function (childRoute, state) {
        return this.can(childRoute, state);
    };
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AOGuestGuard.prototype.can = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        var _this = this;
        if (this._auth.isUser() && state.url !== '/login') {
            return this._router.createUrlTree(['/']);
        }
        this._subscriptions.add('login', AOAuthService._onLogin.subscribe((/**
         * @return {?}
         */
        function () {
            _this._subscriptions.stop();
            _this._zone.run((/**
             * @return {?}
             */
            function () {
                _this._nav.navigateRoot('/');
            }));
        })));
        this._subscriptions.add('route', this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof NavigationEnd && event.url !== state.url) {
                _this._subscriptions.stop();
            }
        })));
        return true;
    };
    AOGuestGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AOGuestGuard.ctorParameters = function () { return [
        { type: Router },
        { type: NavController },
        { type: NgZone },
        { type: AOAuthService }
    ]; };
    return AOGuestGuard;
}());
export { AOGuestGuard };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._router;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._nav;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._auth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tZ3Vlc3QuZ3VhcmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hby1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2d1YXJkcy9hby1ndWVzdC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFJTCxhQUFhLEVBQ2IsTUFBTSxFQUdQLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFNUQ7SUFLRSxzQkFDVSxPQUFlLEVBQ2YsSUFBbUIsRUFDbkIsS0FBYSxFQUNiLEtBQW9CO1FBSHBCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFlO1FBQ25CLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixVQUFLLEdBQUwsS0FBSyxDQUFlO1FBTnRCLG1CQUFjLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7SUFRaEUsQ0FBQzs7Ozs7O0lBRUQsa0NBQVc7Ozs7O0lBQVgsVUFDRSxLQUE2QixFQUM3QixLQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7OztJQUVELHVDQUFnQjs7Ozs7SUFBaEIsVUFDRSxVQUFrQyxFQUNsQyxLQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7OztJQUVELDBCQUFHOzs7OztJQUFILFVBQ0UsS0FBNkIsRUFDN0IsS0FBMEI7UUFGNUIsaUJBc0JDO1FBbEJDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxQztRQUVELElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLFNBQVM7OztRQUFDO1lBQ2hFLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsS0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7WUFBQztnQkFDYixLQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM5QixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsS0FBSztZQUNsRSxJQUFJLEtBQUssWUFBWSxhQUFhLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFO2dCQUM3RCxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUVKLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Z0JBakRGLFVBQVU7Ozs7Z0JBVlQsTUFBTTtnQkFLQyxhQUFhO2dCQVhELE1BQU07Z0JBYWxCLGFBQWE7O0lBc0R0QixtQkFBQztDQUFBLEFBbkRELElBbURDO1NBbERZLFlBQVk7Ozs7OztJQUV2QixzQ0FBZ0U7Ozs7O0lBRzlELCtCQUF1Qjs7Ozs7SUFDdkIsNEJBQTJCOzs7OztJQUMzQiw2QkFBcUI7Ozs7O0lBQ3JCLDZCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgQ2FuQWN0aXZhdGUsXHJcbiAgQ2FuQWN0aXZhdGVDaGlsZCxcclxuICBOYXZpZ2F0aW9uRW5kLFxyXG4gIFJvdXRlcixcclxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxyXG4gIFVybFRyZWVcclxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcclxuXHJcbmltcG9ydCB7IEFPQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hby1hdXRoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBT1N1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi91dGlscy9hby1zdWJzY3JpcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFPR3Vlc3RHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlLCBDYW5BY3RpdmF0ZUNoaWxkIHtcclxuXHJcbiAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uczogQU9TdWJzY3JpcHRpb25zID0gbmV3IEFPU3Vic2NyaXB0aW9ucygpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX3JvdXRlcjogUm91dGVyLFxyXG4gICAgcHJpdmF0ZSBfbmF2OiBOYXZDb250cm9sbGVyLFxyXG4gICAgcHJpdmF0ZSBfem9uZTogTmdab25lLFxyXG4gICAgcHJpdmF0ZSBfYXV0aDogQU9BdXRoU2VydmljZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgY2FuQWN0aXZhdGUoXHJcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XHJcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVXJsVHJlZT4gfCBQcm9taXNlPGJvb2xlYW4gfCBVcmxUcmVlPiB8IGJvb2xlYW4gfCBVcmxUcmVlIHtcclxuICAgIHJldHVybiB0aGlzLmNhbihyb3V0ZSwgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgY2FuQWN0aXZhdGVDaGlsZChcclxuICAgIGNoaWxkUm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxyXG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbiB8IFVybFRyZWU+IHwgUHJvbWlzZTxib29sZWFuIHwgVXJsVHJlZT4gfCBib29sZWFuIHwgVXJsVHJlZSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW4oY2hpbGRSb3V0ZSwgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgY2FuKFxyXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxyXG4gICkge1xyXG4gICAgaWYgKHRoaXMuX2F1dGguaXNVc2VyKCkgJiYgc3RhdGUudXJsICE9PSAnL2xvZ2luJykge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcm91dGVyLmNyZWF0ZVVybFRyZWUoWycvJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkKCdsb2dpbicsIEFPQXV0aFNlcnZpY2UuX29uTG9naW4uc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5zdG9wKCk7XHJcbiAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICB0aGlzLl9uYXYubmF2aWdhdGVSb290KCcvJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSkpO1xyXG5cclxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkKCdyb3V0ZScsIHRoaXMuX3JvdXRlci5ldmVudHMuc3Vic2NyaWJlKGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCAmJiBldmVudC51cmwgIT09IHN0YXRlLnVybCkge1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3RvcCgpO1xyXG4gICAgICB9XHJcbiAgICB9KSk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=