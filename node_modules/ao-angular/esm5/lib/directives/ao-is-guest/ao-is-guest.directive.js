/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-is-guest/ao-is-guest.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, NgZone, TemplateRef, ViewContainerRef } from '@angular/core';
import { AOAuthService } from '../../services/ao-auth.service';
import { AOSubscriptions } from '../../utils/ao-subscriptions';
var AOIsGuestDirective = /** @class */ (function () {
    function AOIsGuestDirective(_element, _templateRef, _viewContainer, _zone) {
        this._element = _element;
        this._templateRef = _templateRef;
        this._viewContainer = _viewContainer;
        this._zone = _zone;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @return {?}
     */
    AOIsGuestDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._subscriptions.add('status', AOAuthService._onChange.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        function (status) {
            _this._zone.run((/**
             * @return {?}
             */
            function () {
                status
                    ? _this._viewContainer.clear()
                    : _this._viewContainer.createEmbeddedView(_this._templateRef);
            }));
        })));
    };
    /**
     * @return {?}
     */
    AOIsGuestDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._subscriptions.stop();
    };
    AOIsGuestDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ao-is-guest]'
                },] }
    ];
    /** @nocollapse */
    AOIsGuestDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: NgZone }
    ]; };
    AOIsGuestDirective.propDecorators = {
        aoIsGuest: [{ type: Input }]
    };
    return AOIsGuestDirective;
}());
export { AOIsGuestDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._subscriptions;
    /** @type {?} */
    AOIsGuestDirective.prototype.aoIsGuest;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._templateRef;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    AOIsGuestDirective.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8taXMtZ3Vlc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW8tYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2FvLWlzLWd1ZXN0L2FvLWlzLWd1ZXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQXFCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2SCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRS9EO0lBU0UsNEJBQ1UsUUFBb0IsRUFDcEIsWUFBOEIsRUFDOUIsY0FBZ0MsRUFDaEMsS0FBYTtRQUhiLGFBQVEsR0FBUixRQUFRLENBQVk7UUFDcEIsaUJBQVksR0FBWixZQUFZLENBQWtCO1FBQzlCLG1CQUFjLEdBQWQsY0FBYyxDQUFrQjtRQUNoQyxVQUFLLEdBQUwsS0FBSyxDQUFRO1FBUmYsbUJBQWMsR0FBb0IsSUFBSSxlQUFlLEVBQUUsQ0FBQztJQVVoRSxDQUFDOzs7O0lBRUQscUNBQVE7OztJQUFSO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxNQUFNO1lBQ3hFLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7O1lBQUM7Z0JBQ2IsTUFBTTtvQkFDSixDQUFDLENBQUMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUU7b0JBQzdCLENBQUMsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNoRSxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDTixDQUFDOzs7O0lBRUQsd0NBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDOztnQkE3QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjs7OztnQkFQbUIsVUFBVTtnQkFBb0MsV0FBVztnQkFBRSxnQkFBZ0I7Z0JBQXhELE1BQU07Ozs0QkFZMUMsS0FBSzs7SUF3QlIseUJBQUM7Q0FBQSxBQS9CRCxJQStCQztTQTVCWSxrQkFBa0I7Ozs7OztJQUU3Qiw0Q0FBZ0U7O0lBRWhFLHVDQUFtQjs7Ozs7SUFHakIsc0NBQTRCOzs7OztJQUM1QiwwQ0FBc0M7Ozs7O0lBQ3RDLDRDQUF3Qzs7Ozs7SUFDeEMsbUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEFPQXV0aFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hby1hdXRoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBT1N1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi8uLi91dGlscy9hby1zdWJzY3JpcHRpb25zJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FvLWlzLWd1ZXN0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEFPSXNHdWVzdERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uczogQU9TdWJzY3JpcHRpb25zID0gbmV3IEFPU3Vic2NyaXB0aW9ucygpO1xyXG5cclxuICBASW5wdXQoKSBhb0lzR3Vlc3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgX3RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHByaXZhdGUgX3pvbmU6IE5nWm9uZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZCgnc3RhdHVzJywgQU9BdXRoU2VydmljZS5fb25DaGFuZ2Uuc3Vic2NyaWJlKHN0YXR1cyA9PiB7XHJcbiAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICBzdGF0dXNcclxuICAgICAgICAgID8gdGhpcy5fdmlld0NvbnRhaW5lci5jbGVhcigpXHJcbiAgICAgICAgICA6IHRoaXMuX3ZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMuX3RlbXBsYXRlUmVmKTtcclxuICAgICAgfSk7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3RvcCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19