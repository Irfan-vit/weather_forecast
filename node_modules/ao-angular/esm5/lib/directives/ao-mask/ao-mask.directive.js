/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-mask/ao-mask.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input } from '@angular/core';
import { IonInput } from '@ionic/angular';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import IMask from 'imask';
var AOMaskDirective = /** @class */ (function () {
    function AOMaskDirective(ionInput) {
        this.ionInput = ionInput;
        this._masks = {
            zipCode: {
                mask: '00.000-000'
            },
            cnpj: {
                mask: '00.000.000/0000-00'
            },
            cpf: {
                mask: '000.000.000-00'
            },
            cpfCnpj: {
                mask: [
                    { mask: '000.000.000-00' },
                    { mask: '00.000.000/0000-00' }
                ]
            },
            phone: {
                mask: [
                    { mask: '(00) 0000-0000' },
                    { mask: '(00) 0-0000-0000' }
                ]
            },
            date: {
                mask: Date,
                pattern: 'DD/MM/YYYY',
                blocks: {
                    DD: { mask: IMask.MaskedRange, from: 1, to: 31, maxLength: 2 },
                    MM: { mask: IMask.MaskedRange, from: 1, to: 12, maxLength: 2 },
                    YYYY: { mask: IMask.MaskedRange, from: 1900, to: 9999, maxLength: 4 }
                },
                format: (/**
                 * @param {?} date
                 * @return {?}
                 */
                function (date) {
                    /** @type {?} */
                    var day = date.getDate().toString().padStart(2, 0);
                    /** @type {?} */
                    var month = (date.getMonth() + 1).toString().padStart(2, 0);
                    /** @type {?} */
                    var year = date.getFullYear();
                    return [day, month, year].join('/');
                }),
                parse: (/**
                 * @param {?} str
                 * @return {?}
                 */
                function (str) {
                    /** @type {?} */
                    var parts = str.split('/');
                    return new Date(parts[2], parts[1] - 1, parts[0]);
                }),
            },
            decimal: {
                mask: Number,
                thousandsSeparator: '.',
                scale: 2,
                signed: false,
                padFractionalZeros: false,
                normalizeZeros: true,
                radix: ',',
                mapToRadix: ['.'],
            },
            int: {
                mask: Number,
                thousandsSeparator: '.',
                scale: 0,
                signed: false,
            }
        };
        this._destroyed = new Subject();
    }
    /**
     * @return {?}
     */
    AOMaskDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var element, formatter, count;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ionInput.getInputElement()];
                    case 1:
                        element = _a.sent();
                        formatter = IMask(element, this.options());
                        // formatter.value
                        // formatter.unmaskedValue
                        // formatter.typedValue = '+55 (61) 1234-5678'
                        this.ionInput.value = element.value;
                        formatter.updateValue();
                        count = 0;
                        this.ionInput.ionChange
                            .pipe(takeUntil(this._destroyed))
                            .subscribe((/**
                         * @param {?} event
                         * @return {?}
                         */
                        function (event) {
                            // event.detail.value
                            _this.ionInput.value = element.value;
                            if (count == 0) {
                                formatter.updateValue();
                                count++;
                            }
                        }));
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    AOMaskDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyed.next();
    };
    /**
     * @private
     * @return {?}
     */
    AOMaskDirective.prototype.options = /**
     * @private
     * @return {?}
     */
    function () {
        if (typeof this.mask == 'string') {
            /** @type {?} */
            var options = { mask: this.mask };
            if (this._masks[this.mask]) {
                options = this._masks[this.mask];
            }
            if (this.min !== undefined) {
                options.min = this.min;
            }
            if (this.max !== undefined) {
                options.max = this.max;
            }
            if (this.min < 0 || this.max < 0) {
                options.signed = true;
            }
            return options;
        }
        return this.mask;
    };
    AOMaskDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ao-mask]',
                    providers: [IonInput],
                },] }
    ];
    /** @nocollapse */
    AOMaskDirective.ctorParameters = function () { return [
        { type: IonInput }
    ]; };
    AOMaskDirective.propDecorators = {
        mask: [{ type: Input, args: ['ao-mask',] }],
        min: [{ type: Input, args: ['ao-min',] }],
        max: [{ type: Input, args: ['ao-max',] }]
    };
    return AOMaskDirective;
}());
export { AOMaskDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype._masks;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype.mask;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype.min;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype.max;
    /**
     * @type {?}
     * @private
     */
    AOMaskDirective.prototype._destroyed;
    /** @type {?} */
    AOMaskDirective.prototype.ionInput;
}
//# sourceMappingURL=data:application/json;base64,