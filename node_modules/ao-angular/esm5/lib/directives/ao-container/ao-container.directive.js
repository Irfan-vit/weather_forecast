/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-container/ao-container.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, ViewContainerRef } from '@angular/core';
var AOContainerDirective = /** @class */ (function () {
    function AOContainerDirective(_content, _resolver) {
        this._content = _content;
        this._resolver = _resolver;
        this._component = null;
    }
    /**
     * @return {?}
     */
    AOContainerDirective.prototype.component = /**
     * @return {?}
     */
    function () {
        return this._component;
    };
    /**
     * @return {?}
     */
    AOContainerDirective.prototype.content = /**
     * @return {?}
     */
    function () {
        return this._content;
    };
    /**
     * @return {?}
     */
    AOContainerDirective.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.content().clear();
    };
    /**
     * @param {?} component
     * @return {?}
     */
    AOContainerDirective.prototype.open = /**
     * @param {?} component
     * @return {?}
     */
    function (component) {
        this.clear();
        this._component = this.content().createComponent(typeof component !== 'function' ? component : this._resolver.resolveComponentFactory(component));
        this._component.instance.directive = this;
        return this._component.instance;
    };
    AOContainerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ao-container]'
                },] }
    ];
    /** @nocollapse */
    AOContainerDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    return AOContainerDirective;
}());
export { AOContainerDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOContainerDirective.prototype._component;
    /**
     * @type {?}
     * @private
     */
    AOContainerDirective.prototype._content;
    /**
     * @type {?}
     * @private
     */
    AOContainerDirective.prototype._resolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tY29udGFpbmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FvLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hby1jb250YWluZXIvYW8tY29udGFpbmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEY7SUFPRSw4QkFDVSxRQUEwQixFQUMxQixTQUFtQztRQURuQyxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUEwQjtRQUpyQyxlQUFVLEdBQVEsSUFBSSxDQUFDO0lBTS9CLENBQUM7Ozs7SUFFRCx3Q0FBUzs7O0lBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELHNDQUFPOzs7SUFBUDtRQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsb0NBQUs7OztJQUFMO1FBQ0UsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7O0lBRUQsbUNBQUk7Ozs7SUFBSixVQUFLLFNBQWM7UUFDakIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxDQUM5QyxPQUFPLFNBQVMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FDaEcsQ0FBQztRQUVGLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFFMUMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztJQUNsQyxDQUFDOztnQkFuQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzNCOzs7O2dCQUo2QyxnQkFBZ0I7Z0JBQXJELHdCQUF3Qjs7SUF1Q2pDLDJCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FsQ1ksb0JBQW9COzs7Ozs7SUFFL0IsMENBQStCOzs7OztJQUc3Qix3Q0FBa0M7Ozs7O0lBQ2xDLHlDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRGlyZWN0aXZlLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thby1jb250YWluZXJdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQU9Db250YWluZXJEaXJlY3RpdmUge1xyXG5cclxuICBwcml2YXRlIF9jb21wb25lbnQ6IGFueSA9IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfY29udGVudDogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHByaXZhdGUgX3Jlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcclxuICApIHtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jb21wb25lbnQ7XHJcbiAgfVxyXG5cclxuICBjb250ZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpIHtcclxuICAgIHRoaXMuY29udGVudCgpLmNsZWFyKCk7XHJcbiAgfVxyXG5cclxuICBvcGVuKGNvbXBvbmVudDogYW55KSB7XHJcbiAgICB0aGlzLmNsZWFyKCk7XHJcblxyXG4gICAgdGhpcy5fY29tcG9uZW50ID0gdGhpcy5jb250ZW50KCkuY3JlYXRlQ29tcG9uZW50KFxyXG4gICAgICB0eXBlb2YgY29tcG9uZW50ICE9PSAnZnVuY3Rpb24nID8gY29tcG9uZW50IDogdGhpcy5fcmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50KVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9jb21wb25lbnQuaW5zdGFuY2UuZGlyZWN0aXZlID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY29tcG9uZW50Lmluc3RhbmNlO1xyXG4gIH1cclxuXHJcbn1cclxuIl19