/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, NgZone } from '@angular/core';
import { FirebaseApp } from '@angular/fire';
import { _firebaseAppFactory } from '@angular/fire/firebase.app.module';
import { AOFirebaseConnectionService } from './ao-firebase-connection.service';
import { AOEnvService } from './ao-env.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
import * as i2 from "./ao-env.service";
var AOFirebaseFactoryService = /** @class */ (function () {
    function AOFirebaseFactoryService(_app, _zone, _environment) {
        this._app = _app;
        this._zone = _zone;
        this._environment = _environment;
        this.connections = {};
        this.factory(this._environment.firebase.name, this._environment.firebase.configs, this._app);
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    AOFirebaseFactoryService.prototype.conn = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (this.connections[name]) {
            return this.connections[name];
        }
        throw new Error('FirebaseApp(' + name + ') not found.');
    };
    /**
     * @param {?} configs
     * @return {?}
     */
    AOFirebaseFactoryService.prototype.makeHash = /**
     * @param {?} configs
     * @return {?}
     */
    function (configs) {
        return JSON.stringify({
            projectId: configs.projectId,
            apiKey: configs.apiKey
        });
    };
    /**
     * @param {?} name
     * @param {?=} configs
     * @param {?=} app
     * @return {?}
     */
    AOFirebaseFactoryService.prototype.factory = /**
     * @param {?} name
     * @param {?=} configs
     * @param {?=} app
     * @return {?}
     */
    function (name, configs, app) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var hash;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        hash = this.makeHash(configs);
                        if (!this.connections[name]) return [3 /*break*/, 3];
                        if (!(this.connections[name].hash() === hash)) return [3 /*break*/, 1];
                        return [2 /*return*/, Promise.resolve(true)];
                    case 1: return [4 /*yield*/, this.connections[name].destroy()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        if (!app) {
                            app = _firebaseAppFactory((/** @type {?} */ (configs)), this._zone, name);
                        }
                        this.connections[name] = new AOFirebaseConnectionService(name, hash, app, this._zone);
                        return [2 /*return*/, Promise.resolve(true)];
                }
            });
        });
    };
    /**
     * @param {?=} only
     * @param {?=} except
     * @return {?}
     */
    AOFirebaseFactoryService.prototype.destroy = /**
     * @param {?=} only
     * @param {?=} except
     * @return {?}
     */
    function (only, except) {
        if (only === void 0) { only = []; }
        if (except === void 0) { except = ['master']; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var promises;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                if (only.length === 0) {
                    only = Object.keys(this.connections);
                }
                promises = [];
                Object.keys(this.connections).forEach((/**
                 * @param {?} name
                 * @return {?}
                 */
                function (name) {
                    if (only.indexOf(name) >= 0 && except.indexOf(name) === -1) {
                        promises.push(_this.conn(name).destroy());
                    }
                }));
                return [2 /*return*/, Promise.all(promises).then((/**
                     * @return {?}
                     */
                    function () { return true; }))];
            });
        });
    };
    AOFirebaseFactoryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AOFirebaseFactoryService.ctorParameters = function () { return [
        { type: FirebaseApp },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
    ]; };
    /** @nocollapse */ AOFirebaseFactoryService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AOFirebaseFactoryService_Factory() { return new AOFirebaseFactoryService(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.AOEnvService)); }, token: AOFirebaseFactoryService, providedIn: "root" });
    return AOFirebaseFactoryService;
}());
export { AOFirebaseFactoryService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype.connections;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._app;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._environment;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tZmlyZWJhc2UtZmFjdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW8tYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hby1maXJlYmFzZS1mYWN0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxXQUFXLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXRFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUU5QztJQU9FLGtDQUNVLElBQWlCLEVBQ2pCLEtBQWEsRUFDUyxZQUFZO1FBRmxDLFNBQUksR0FBSixJQUFJLENBQWE7UUFDakIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNTLGlCQUFZLEdBQVosWUFBWSxDQUFBO1FBTHBDLGdCQUFXLEdBQW1ELEVBQUUsQ0FBQztRQU92RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9GLENBQUM7Ozs7O0lBRUQsdUNBQUk7Ozs7SUFBSixVQUFLLElBQWE7UUFDaEIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQjtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxjQUFjLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7OztJQUVELDJDQUFROzs7O0lBQVIsVUFBUyxPQUEwQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxTQUFTO1lBQzVCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7O0lBRUssMENBQU87Ozs7OztJQUFiLFVBQWMsSUFBWSxFQUFFLE9BQTJCLEVBQUUsR0FBaUI7Ozs7Ozt3QkFDbEUsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDOzZCQUUvQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUF0Qix3QkFBc0I7NkJBQ3BCLENBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUEsRUFBdEMsd0JBQXNDO3dCQUN4QyxzQkFBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDOzRCQUU3QixxQkFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFBOzt3QkFBdEMsU0FBc0MsQ0FBQzs7O3dCQUkzQyxJQUFJLENBQUMsR0FBRyxFQUFFOzRCQUNSLEdBQUcsR0FBRyxtQkFBbUIsQ0FBQyxtQkFBQSxPQUFPLEVBQXFCLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQzt5QkFDM0U7d0JBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLDJCQUEyQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFFdEYsc0JBQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQzs7OztLQUM5Qjs7Ozs7O0lBRUssMENBQU87Ozs7O0lBQWIsVUFBYyxJQUFtQixFQUFFLE1BQTZCO1FBQWxELHFCQUFBLEVBQUEsU0FBbUI7UUFBRSx1QkFBQSxFQUFBLFVBQW9CLFFBQVEsQ0FBQzs7Ozs7Z0JBQzlELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3JCLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDdEM7Z0JBRUssUUFBUSxHQUF1QixFQUFFO2dCQUV2QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPOzs7O2dCQUFDLFVBQUEsSUFBSTtvQkFDeEMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO3dCQUMxRCxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztxQkFDMUM7Z0JBQ0gsQ0FBQyxFQUFDLENBQUM7Z0JBRUgsc0JBQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJOzs7b0JBQUMsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLEVBQUMsRUFBQzs7O0tBQy9DOztnQkEvREYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFSTyxXQUFXO2dCQURTLE1BQU07Z0RBaUI3QixNQUFNLFNBQUMsWUFBWTs7O21DQWpCeEI7Q0F3RUMsQUFqRUQsSUFpRUM7U0E5RFksd0JBQXdCOzs7Ozs7SUFFbkMsK0NBQXlFOzs7OztJQUd2RSx3Q0FBeUI7Ozs7O0lBQ3pCLHlDQUFxQjs7Ozs7SUFDckIsZ0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RmlyZWJhc2VBcHAsIEZpcmViYXNlQXBwQ29uZmlnfSBmcm9tICdAYW5ndWxhci9maXJlJztcclxuaW1wb3J0IHtfZmlyZWJhc2VBcHBGYWN0b3J5fSBmcm9tICdAYW5ndWxhci9maXJlL2ZpcmViYXNlLmFwcC5tb2R1bGUnO1xyXG5cclxuaW1wb3J0IHtBT0ZpcmViYXNlQ29ubmVjdGlvblNlcnZpY2V9IGZyb20gJy4vYW8tZmlyZWJhc2UtY29ubmVjdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHtBT0VudlNlcnZpY2V9IGZyb20gJy4vYW8tZW52LnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQU9GaXJlYmFzZUZhY3RvcnlTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBjb25uZWN0aW9uczogeyBba2V5OiBzdHJpbmddOiBBT0ZpcmViYXNlQ29ubmVjdGlvblNlcnZpY2UgfSA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX2FwcDogRmlyZWJhc2VBcHAsXHJcbiAgICBwcml2YXRlIF96b25lOiBOZ1pvbmUsXHJcbiAgICBASW5qZWN0KEFPRW52U2VydmljZSkgcHJpdmF0ZSBfZW52aXJvbm1lbnRcclxuICApIHtcclxuICAgIHRoaXMuZmFjdG9yeSh0aGlzLl9lbnZpcm9ubWVudC5maXJlYmFzZS5uYW1lLCB0aGlzLl9lbnZpcm9ubWVudC5maXJlYmFzZS5jb25maWdzLCB0aGlzLl9hcHApO1xyXG4gIH1cclxuXHJcbiAgY29ubihuYW1lPzogc3RyaW5nKSB7XHJcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uc1tuYW1lXSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uc1tuYW1lXTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignRmlyZWJhc2VBcHAoJyArIG5hbWUgKyAnKSBub3QgZm91bmQuJyk7XHJcbiAgfVxyXG5cclxuICBtYWtlSGFzaChjb25maWdzOiBGaXJlYmFzZUFwcENvbmZpZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICBwcm9qZWN0SWQ6IGNvbmZpZ3MucHJvamVjdElkLFxyXG4gICAgICBhcGlLZXk6IGNvbmZpZ3MuYXBpS2V5XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGZhY3RvcnkobmFtZTogc3RyaW5nLCBjb25maWdzPzogRmlyZWJhc2VBcHBDb25maWcsIGFwcD86IEZpcmViYXNlQXBwKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBoYXNoID0gdGhpcy5tYWtlSGFzaChjb25maWdzKTtcclxuXHJcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uc1tuYW1lXSkge1xyXG4gICAgICBpZiAodGhpcy5jb25uZWN0aW9uc1tuYW1lXS5oYXNoKCkgPT09IGhhc2gpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY29ubmVjdGlvbnNbbmFtZV0uZGVzdHJveSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhcHApIHtcclxuICAgICAgYXBwID0gX2ZpcmViYXNlQXBwRmFjdG9yeShjb25maWdzIGFzIEZpcmViYXNlQXBwQ29uZmlnLCB0aGlzLl96b25lLCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbm5lY3Rpb25zW25hbWVdID0gbmV3IEFPRmlyZWJhc2VDb25uZWN0aW9uU2VydmljZShuYW1lLCBoYXNoLCBhcHAsIHRoaXMuX3pvbmUpO1xyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBkZXN0cm95KG9ubHk6IHN0cmluZ1tdID0gW10sIGV4Y2VwdDogc3RyaW5nW10gPSBbJ21hc3RlciddKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBpZiAob25seS5sZW5ndGggPT09IDApIHtcclxuICAgICAgb25seSA9IE9iamVjdC5rZXlzKHRoaXMuY29ubmVjdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPGJvb2xlYW4+W10gPSBbXTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLmNvbm5lY3Rpb25zKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICBpZiAob25seS5pbmRleE9mKG5hbWUpID49IDAgJiYgZXhjZXB0LmluZGV4T2YobmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmNvbm4obmFtZSkuZGVzdHJveSgpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHRydWUpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19