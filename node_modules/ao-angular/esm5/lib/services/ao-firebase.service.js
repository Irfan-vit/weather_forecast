/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as firebase from 'firebase/app';
import { AOFirebaseFactoryService } from './ao-firebase-factory.service';
import * as i0 from "@angular/core";
import * as i1 from "./ao-firebase-factory.service";
var AOFirebaseService = /** @class */ (function () {
    function AOFirebaseService(_firebase) {
        this._firebase = _firebase;
        this._name = 'master';
    }
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.firebase = /**
     * @return {?}
     */
    function () {
        return this._firebase;
    };
    /**
     * @param {?} configs
     * @return {?}
     */
    AOFirebaseService.prototype.factory = /**
     * @param {?} configs
     * @return {?}
     */
    function (configs) {
        return this._firebase.factory(this.name(), configs);
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.conn = /**
     * @return {?}
     */
    function () {
        return this._firebase.conn(this.name());
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.name = /**
     * @return {?}
     */
    function () {
        return this._name;
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.hash = /**
     * @return {?}
     */
    function () {
        return this.conn().hash();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.app = /**
     * @return {?}
     */
    function () {
        return this.conn().app();
    };
    // -------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.auth = 
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        return this.conn().auth();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.authState = /**
     * @return {?}
     */
    function () {
        return this.auth().authState;
    };
    // -------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.db = 
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        return this.conn().database();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.dbNow = /**
     * @return {?}
     */
    function () {
        return firebase.database.ServerValue.TIMESTAMP;
    };
    // -------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.fs = 
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        return this.conn().firestore();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.fsId = /**
     * @return {?}
     */
    function () {
        return this.fs().createId();
    };
    /**
     * @template T
     * @param {?} path
     * @return {?}
     */
    AOFirebaseService.prototype.fsDoc = /**
     * @template T
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.fs().doc(path);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    AOFirebaseService.prototype.fsDocValue = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.fsDoc(path).valueChanges();
    };
    /**
     * @param {?} path
     * @return {?}
     */
    AOFirebaseService.prototype.fsDocSnapshot = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this.fs().doc(path).snapshotChanges();
    };
    /**
     * @param {?} path
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    AOFirebaseService.prototype.fsDocSet = /**
     * @param {?} path
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    function (path, data, options) {
        if (options === void 0) { options = { merge: true }; }
        return this.fs().doc(path).set(data, options);
    };
    /**
     * @template T
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    AOFirebaseService.prototype.fsCol = /**
     * @template T
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    function (path, queryFn) {
        return this.fs().collection(path, queryFn);
    };
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    AOFirebaseService.prototype.fsColValues = /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    function (path, queryFn) {
        return this.fsCol(path, queryFn).valueChanges();
    };
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    AOFirebaseService.prototype.fsColSnapshot = /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    function (path, queryFn) {
        return this.fsCol(path, queryFn).snapshotChanges();
    };
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    AOFirebaseService.prototype.fsColState = /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    function (path, queryFn) {
        return this.fsCol(path, queryFn).stateChanges();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.fsBatch = /**
     * @return {?}
     */
    function () {
        return this.fs().firestore.batch();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.fsNow = /**
     * @return {?}
     */
    function () {
        return firebase.firestore.FieldValue.serverTimestamp();
    };
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.fsTimestamp = /**
     * @return {?}
     */
    function () {
        return firebase.firestore.Timestamp;
    };
    // fsToMilliseconds(item, field) {
    //   if (item[field] instanceof Timestamp) {
    //     item[field] = (new Date(item[field].seconds * 1000 + item[field].nanoseconds / 1000000)).getTime();
    //   }
    // }
    // fsAddMilliseconds(date) {
    //   date.milliseconds = (new Date(date.seconds * 1000 + date.nanoseconds / 1000000)).getTime();
    //   return date;
    // }
    // fsTransaction<T>(updateFunction: (transaction: firebase.firestore.Timestamp) => Promise<T>): Promise<T> {
    //   return this.fs().firestore.runTransaction(updateFunction);
    // }
    // fsCounter(path, field = 'count', qt = 1) {
    //   return this.fsTransaction(transaction => {
    //     const ref = this.fsDoc(path).ref;
    //     return transaction.get(ref).then((doc) => {
    //
    //       const update = {};
    //
    //       if (doc.exists) {
    //         const value = parseInt(doc.get(field), 10);
    //         qt = value >= 0 || value <= 0 ? qt + value : qt;
    //       }
    //
    //       update[field] = qt;
    //
    //       transaction.set(ref, update, {merge: true});
    //
    //     });
    //   });
    // }
    // fsUp(path, field = 'count') {
    //   return this.fsCounter(path, field, 1);
    // }
    // fsDown(path, field = 'count') {
    //   return this.fsCounter(path, field, -1);
    // }
    // -------------------------------------------------------------------------------------------------------------------
    // fsToMilliseconds(item, field) {
    //   if (item[field] instanceof Timestamp) {
    //     item[field] = (new Date(item[field].seconds * 1000 + item[field].nanoseconds / 1000000)).getTime();
    //   }
    // }
    // fsAddMilliseconds(date) {
    //   date.milliseconds = (new Date(date.seconds * 1000 + date.nanoseconds / 1000000)).getTime();
    //   return date;
    // }
    // fsTransaction<T>(updateFunction: (transaction: firebase.firestore.Timestamp) => Promise<T>): Promise<T> {
    //   return this.fs().firestore.runTransaction(updateFunction);
    // }
    // fsCounter(path, field = 'count', qt = 1) {
    //   return this.fsTransaction(transaction => {
    //     const ref = this.fsDoc(path).ref;
    //     return transaction.get(ref).then((doc) => {
    //
    //       const update = {};
    //
    //       if (doc.exists) {
    //         const value = parseInt(doc.get(field), 10);
    //         qt = value >= 0 || value <= 0 ? qt + value : qt;
    //       }
    //
    //       update[field] = qt;
    //
    //       transaction.set(ref, update, {merge: true});
    //
    //     });
    //   });
    // }
    // fsUp(path, field = 'count') {
    //   return this.fsCounter(path, field, 1);
    // }
    // fsDown(path, field = 'count') {
    //   return this.fsCounter(path, field, -1);
    // }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.msn = 
    // fsToMilliseconds(item, field) {
    //   if (item[field] instanceof Timestamp) {
    //     item[field] = (new Date(item[field].seconds * 1000 + item[field].nanoseconds / 1000000)).getTime();
    //   }
    // }
    // fsAddMilliseconds(date) {
    //   date.milliseconds = (new Date(date.seconds * 1000 + date.nanoseconds / 1000000)).getTime();
    //   return date;
    // }
    // fsTransaction<T>(updateFunction: (transaction: firebase.firestore.Timestamp) => Promise<T>): Promise<T> {
    //   return this.fs().firestore.runTransaction(updateFunction);
    // }
    // fsCounter(path, field = 'count', qt = 1) {
    //   return this.fsTransaction(transaction => {
    //     const ref = this.fsDoc(path).ref;
    //     return transaction.get(ref).then((doc) => {
    //
    //       const update = {};
    //
    //       if (doc.exists) {
    //         const value = parseInt(doc.get(field), 10);
    //         qt = value >= 0 || value <= 0 ? qt + value : qt;
    //       }
    //
    //       update[field] = qt;
    //
    //       transaction.set(ref, update, {merge: true});
    //
    //     });
    //   });
    // }
    // fsUp(path, field = 'count') {
    //   return this.fsCounter(path, field, 1);
    // }
    // fsDown(path, field = 'count') {
    //   return this.fsCounter(path, field, -1);
    // }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        return this.conn().messaging();
    };
    // -------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    AOFirebaseService.prototype.disk = 
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        return this.conn().storage();
    };
    AOFirebaseService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AOFirebaseService.ctorParameters = function () { return [
        { type: AOFirebaseFactoryService }
    ]; };
    /** @nocollapse */ AOFirebaseService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AOFirebaseService_Factory() { return new AOFirebaseService(i0.ɵɵinject(i1.AOFirebaseFactoryService)); }, token: AOFirebaseService, providedIn: "root" });
    return AOFirebaseService;
}());
export { AOFirebaseService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseService.prototype._name;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseService.prototype._firebase;
}
//# sourceMappingURL=data:application/json;base64,