/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-cache.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Md5 } from 'ts-md5';
// @Injectable({
//   providedIn: 'root'
// })
var 
// @Injectable({
//   providedIn: 'root'
// })
AOCacheService = /** @class */ (function () {
    function AOCacheService(_db, _storage) {
        this._db = _db;
        this._storage = _storage;
        this._configs = {
            type: 'full',
            // none|local|server|full
            expire: ((24 * 60 * 60) * 1000),
            metadata: {},
        };
    }
    /**
     * @param {?} params
     * @param {?} request
     * @param {?=} configs
     * @return {?}
     */
    AOCacheService.prototype.find = /**
     * @param {?} params
     * @param {?} request
     * @param {?=} configs
     * @return {?}
     */
    function (params, request, configs) {
        var _this = this;
        if (configs === void 0) { configs = {}; }
        configs = (typeof configs === 'object') ? tslib_1.__assign({}, this._configs, configs) : tslib_1.__assign({}, this._configs);
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var key, cached;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = JSON.stringify(params);
                        key = Md5.hashStr(params);
                        return [4 /*yield*/, this.get(key, configs)];
                    case 1:
                        cached = _a.sent();
                        if (cached) {
                            return [2 /*return*/, resolve(cached)];
                        }
                        request().then((/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.set(key, params, response, configs)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/, resolve(response)];
                                }
                            });
                        }); }));
                        return [2 /*return*/];
                }
            });
        }); }));
    };
    /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    AOCacheService.prototype.get = /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    function (key, configs) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response, response_updated_at;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('Cache::get', key);
                        response = this._storage.retrieve(key);
                        response_updated_at = this._storage.retrieve(key + '_updated_at');
                        if (response != null
                            && response_updated_at != null
                            && (Date.now() - response_updated_at) <= configs.expire) {
                            return [2 /*return*/, JSON.parse(response)];
                        }
                        return [4 /*yield*/, this.getInServer(key, configs)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    AOCacheService.prototype.getInServer = /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    function (key, configs) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cached, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cached = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._db.query((/**
                             * @param {?} q
                             * @return {?}
                             */
                            function (q) { return q.Get(q.Match(q.Index('cache_by_key'), key)); }))];
                    case 2:
                        cached = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        return [2 /*return*/, null];
                    case 4:
                        this._storage.store(key, cached.data.response);
                        this._storage.store(key + '_updated_at', cached.data.updated_at);
                        if ((Date.now() - cached.data.updated_at) > configs.expire) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, JSON.parse(cached.data.response)];
                }
            });
        });
    };
    /**
     * @param {?} key
     * @param {?} request
     * @param {?} response
     * @param {?} configs
     * @return {?}
     */
    AOCacheService.prototype.set = /**
     * @param {?} key
     * @param {?} request
     * @param {?} response
     * @param {?} configs
     * @return {?}
     */
    function (key, request, response, configs) {
        /** @type {?} */
        var data = {
            key: key,
            request: request,
            response: JSON.stringify(response),
            updated_at: Date.now(),
            metadata: configs.metadata
        };
        this._storage.store(key, data.response);
        this._storage.store(key + '_updated_at', data.updated_at);
        return this.setInServer(key, data);
    };
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    AOCacheService.prototype.setInServer = /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    function (key, data) {
        return this._db.query((/**
         * @param {?} q
         * @return {?}
         */
        function (q) { return q.If(q.Exists(q.Match(q.Index('cache_by_key'), key)), q.Update(q.Select(['ref'], q.Get(q.Match(q.Index('cache_by_key'), key))), { data: tslib_1.__assign({}, data) }), q.Create(q.Collection('cache'), { data: tslib_1.__assign({}, data, { created_at: Date.now() }) })); }));
    };
    return AOCacheService;
}());
// @Injectable({
//   providedIn: 'root'
// })
export { AOCacheService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._configs;
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._db;
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._storage;
}
//# sourceMappingURL=data:application/json;base64,