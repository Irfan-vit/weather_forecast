/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/ao-tree.helpers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
var AONodeItem = /** @class */ (function () {
    function AONodeItem() {
        this.level = 0;
        this.expanded = false;
    }
    /**
     * @return {?}
     */
    AONodeItem.prototype.isExpanded = /**
     * @return {?}
     */
    function () {
        return this.expanded;
    };
    /**
     * @return {?}
     */
    AONodeItem.prototype.isExpandable = /**
     * @return {?}
     */
    function () {
        return this.children.length > 0;
    };
    return AONodeItem;
}());
export { AONodeItem };
if (false) {
    /** @type {?} */
    AONodeItem.prototype.data;
    /** @type {?} */
    AONodeItem.prototype.level;
    /** @type {?} */
    AONodeItem.prototype.children;
    /** @type {?} */
    AONodeItem.prototype.expanded;
}
var AOTreeHelper = /** @class */ (function () {
    function AOTreeHelper(_zone) {
        this._zone = _zone;
        this.map = new Map();
        this.tree = [];
    }
    //--------------------------------------------------------------------------------------------------------------------
    // STATIC METHODS
    //--------------------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------------------
    // STATIC METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @param {?=} map
     * @param {?=} fk_name
     * @param {?=} pk_name
     * @return {?}
     */
    AOTreeHelper.listToTree = 
    //--------------------------------------------------------------------------------------------------------------------
    // STATIC METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @param {?=} map
     * @param {?=} fk_name
     * @param {?=} pk_name
     * @return {?}
     */
    function (items, map, fk_name, pk_name) {
        if (fk_name === void 0) { fk_name = 'parent_id'; }
        if (pk_name === void 0) { pk_name = 'id'; }
        //
        // inicializa o map, se ainda nao tiver sido inicializado
        //
        if (map == undefined) {
            map = new Map();
        }
        //
        // funcao para criar todos os nodes necessarios
        //
        /** @type {?} */
        var create = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var node = map.get(data[pk_name]);
            if (node == undefined) {
                node = new AONodeItem();
            }
            node.data = data;
            node.children = [];
            map.set(data[pk_name], node);
            return node;
        });
        //
        // aninha todos os nodes do map
        //
        /** @type {?} */
        var nest = (/**
         * @param {?} root
         * @param {?} node
         * @return {?}
         */
        function (root, node) {
            /** @type {?} */
            var parent = node.data[fk_name] ? map.get(node.data[fk_name]) : undefined;
            if (parent) {
                node.level = parent.level + 1;
                parent.children.push(node);
            }
            else {
                root.push(node);
            }
            return root;
        });
        return {
            map: map, tree: items.map(create).reduce(nest, [])
        };
    };
    /**
     * @param {?} tree
     * @return {?}
     */
    AOTreeHelper.flatTree = /**
     * @param {?} tree
     * @return {?}
     */
    function (tree) {
        /** @type {?} */
        var flat = (/**
         * @param {?} nodes
         * @param {?} node
         * @return {?}
         */
        function (nodes, node) {
            nodes.push(node);
            return node.children.length > 0
                ? node.children.reduce(flat, nodes)
                : nodes;
        });
        return tree.reduce(flat, []);
    };
    //--------------------------------------------------------------------------------------------------------------------
    // OBJECT METHODS
    //--------------------------------------------------------------------------------------------------------------------
    //--------------------------------------------------------------------------------------------------------------------
    // OBJECT METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @return {?}
     */
    AOTreeHelper.prototype.setItems = 
    //--------------------------------------------------------------------------------------------------------------------
    // OBJECT METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        var _this = this;
        this._zone.run((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var response = AOTreeHelper.listToTree(items, _this.map);
            _this.map = response.map;
            _this.tree = response.tree;
        }));
    };
    /**
     * @return {?}
     */
    AOTreeHelper.prototype.getRoot = /**
     * @return {?}
     */
    function () {
        return this.tree;
    };
    ;
    /**
     * @param {?=} node
     * @return {?}
     */
    AOTreeHelper.prototype.getChildren = /**
     * @param {?=} node
     * @return {?}
     */
    function (node) {
        return node ? node.children : this.getRoot();
    };
    ;
    /**
     * @param {?=} node
     * @return {?}
     */
    AOTreeHelper.prototype.getDescendants = /**
     * @param {?=} node
     * @return {?}
     */
    function (node) {
        return AOTreeHelper.flatTree(node ? node.children : this.getRoot());
    };
    ;
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.getParent = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.map.get(node.data.parent_id);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.getParents = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var parent = this.getParent(node);
        return parent ? tslib_1.__spread([parent], this.getParents(parent)) : [];
    };
    /**
     * @param {?=} node
     * @return {?}
     */
    AOTreeHelper.prototype.getBrothers = /**
     * @param {?=} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var parent = this.getParent(node);
        return parent ? parent.children : this.getRoot();
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.isVisible = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var parent = this.getParent(node);
        return parent ? parent.expanded : true;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.tootle = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node.expanded) {
            tslib_1.__spread([node], this.getDescendants(node)).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.expanded = false; }));
        }
        else {
            node.expanded = true;
        }
        return node.expanded;
    };
    /**
     * @return {?}
     */
    AOTreeHelper.prototype.expandAll = /**
     * @return {?}
     */
    function () {
        this.getDescendants().map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.expanded = true; }));
    };
    /**
     * @return {?}
     */
    AOTreeHelper.prototype.contractAll = /**
     * @return {?}
     */
    function () {
        this.getDescendants().map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.expanded = false; }));
    };
    /**
     * @param {?=} node
     * @return {?}
     */
    AOTreeHelper.prototype.getNextOrder = /**
     * @param {?=} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var children = this.getChildren(node);
        return children.length === 0 ? 0 : children.slice(-1)[0].data.order + 1;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.getNavigate = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var brothers = this.getBrothers(node);
        /** @type {?} */
        var locate = (/**
         * @param {?} navigate
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (navigate, item, index) {
            if (node.data.id === item.data.id) {
                navigate.previous = index > 0 ? brothers[index - 1] : null;
                navigate.next = index < brothers.length ? brothers[index + 1] : null;
            }
            return navigate;
        });
        return brothers.reduce(locate, { previous: null, current: node, next: null });
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.getPrevious = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.getNavigate(node).previous;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    AOTreeHelper.prototype.getNext = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.getNavigate(node).next;
    };
    return AOTreeHelper;
}());
export { AOTreeHelper };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype.map;
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype.tree;
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype._zone;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,