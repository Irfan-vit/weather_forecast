/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-subscriptions.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AOSubscriptions = /** @class */ (function () {
    /**
     * @return any
     */
    function AOSubscriptions() {
        var _this = this;
        this.add = (/**
         * @template THIS
         * @this {THIS}
         * @param {?} name
         * @param {?} subscription
         * @return {THIS}
         */
        function (name, subscription) {
            _this[name] = subscription;
            return _this;
        });
        this.stop = (/**
         * @template THIS
         * @this {THIS}
         * @param {?=} names
         * @return {THIS}
         */
        function (names) {
            if (names === void 0) { names = null; }
            Object.keys(_this).filter((/**
             * @param {?} name
             * @return {?}
             */
            function (name) { return ['add', 'stop'].indexOf(name) == -1; })).forEach((/**
             * @param {?} name
             * @return {?}
             */
            function (name) {
                if (names === null || names.indexOf(name + '') >= 0) {
                    _this[name].unsubscribe();
                }
            }));
            return _this;
        });
        /** @type {?} */
        var handler = {
            set: /**
             * @param {?} obj
             * @param {?} prop
             * @param {?} value
             * @return {?}
             */
            function (obj, prop, value) {
                if (obj[prop] && obj[prop].unsubscribe) {
                    obj[prop].unsubscribe();
                }
                Reflect.set(obj, prop, value);
                return value;
            }
        };
        return new Proxy(this, handler);
    }
    return AOSubscriptions;
}());
export { AOSubscriptions };
if (false) {
    /** @type {?} */
    AOSubscriptions.prototype.add;
    /** @type {?} */
    AOSubscriptions.prototype.stop;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tc3Vic2NyaXB0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FvLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvYW8tc3Vic2NyaXB0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBO0lBRUU7O09BRUc7SUFDSDtRQUFBLGlCQWNDO1FBRVEsUUFBRzs7Ozs7OztRQUFHLFVBQUMsSUFBWSxFQUFFLFlBQTBCO1lBQ3RELEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUM7WUFDMUIsT0FBTyxLQUFJLENBQUM7UUFDZCxDQUFDLEVBQUM7UUFFTyxTQUFJOzs7Ozs7UUFBRyxVQUFDLEtBQXNCO1lBQXRCLHNCQUFBLEVBQUEsWUFBc0I7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxNQUFNOzs7O1lBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQW5DLENBQW1DLEVBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxJQUFJO2dCQUNoRixJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNuRCxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7aUJBQzFCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFFSCxPQUFPLEtBQUksQ0FBQztRQUNkLENBQUMsRUFBQzs7WUE1Qk0sT0FBTyxHQUFHO1lBQ2QsR0FBRzs7Ozs7O3NCQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSztnQkFDbEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRTtvQkFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN6QjtnQkFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBRTlCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztTQUNGO1FBRUQsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQXVDSCxzQkFBQztBQUFELENBQUMsQUExREQsSUEwREM7Ozs7SUFyQ0MsOEJBR0U7O0lBRUYsK0JBUUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzL2ludGVybmFsL1N1YnNjcmlwdGlvbic7XHJcblxyXG5leHBvcnQgY2xhc3MgQU9TdWJzY3JpcHRpb25zIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHJldHVybiBhbnlcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSB7XHJcbiAgICAgIHNldChvYmosIHByb3AsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKG9ialtwcm9wXSAmJiBvYmpbcHJvcF0udW5zdWJzY3JpYmUpIHtcclxuICAgICAgICAgIG9ialtwcm9wXS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUmVmbGVjdC5zZXQob2JqLCBwcm9wLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgcmVhZG9ubHkgYWRkID0gKG5hbWU6IHN0cmluZywgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24pID0+IHtcclxuICAgIHRoaXNbbmFtZV0gPSBzdWJzY3JpcHRpb247XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICByZWFkb25seSBzdG9wID0gKG5hbWVzOiBzdHJpbmdbXSA9IG51bGwpID0+IHtcclxuICAgIE9iamVjdC5rZXlzKHRoaXMpLmZpbHRlcihuYW1lID0+IFsnYWRkJywgJ3N0b3AnXS5pbmRleE9mKG5hbWUpID09IC0xKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICBpZiAobmFtZXMgPT09IG51bGwgfHwgbmFtZXMuaW5kZXhPZihuYW1lICsgJycpID49IDApIHtcclxuICAgICAgICB0aGlzW25hbWVdLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8vIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IHt9O1xyXG4gIC8vXHJcbiAgLy8gYWRkKG5hbWU6IHN0cmluZywgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24pIHtcclxuICAvLyAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbnNbbmFtZV0pIHtcclxuICAvLyAgICAgdGhpcy5zdWJzY3JpcHRpb25zW25hbWVdLnVuc3Vic2NyaWJlKCk7XHJcbiAgLy8gICB9XHJcbiAgLy9cclxuICAvLyAgIHRoaXMuc3Vic2NyaXB0aW9uc1tuYW1lXSA9IHN1YnNjcmlwdGlvbjtcclxuICAvL1xyXG4gIC8vICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcclxuICAvLyB9XHJcbiAgLy9cclxuICAvLyBzdG9wID0gKG5hbWVzOiBzdHJpbmdbXSA9IG51bGwpID0+IHtcclxuICAvLyAgIE9iamVjdC5rZXlzKHRoaXMuc3Vic2NyaXB0aW9ucykuZm9yRWFjaChuYW1lID0+IHtcclxuICAvLyAgICAgaWYgKG5hbWVzID09PSBudWxsIHx8IG5hbWVzLmluZGV4T2YobmFtZSArICcnKSA+PSAwKSB7XHJcbiAgLy8gICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW25hbWVdLnVuc3Vic2NyaWJlKCk7XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH0pO1xyXG4gIC8vXHJcbiAgLy8gICByZXR1cm4gdGhpcztcclxuICAvLyB9O1xyXG5cclxufVxyXG4iXX0=