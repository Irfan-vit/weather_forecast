/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-string.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
var AOString = /** @class */ (function () {
    function AOString() {
    }
    /**
     * @param {?} text
     * @return {?}
     */
    AOString.onlyNumbers = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return text.toString().replace(/\D/g, '');
    };
    /**
     * @param {?} text
     * @return {?}
     */
    AOString.trim = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return text.toString().replace(/\s+/g, ' ').trim();
    };
    /**
     * @param {?} text
     * @return {?}
     */
    AOString.readingTime = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return text.length * 0.2 * 1000;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    AOString.slug = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return text.toString().toLowerCase()
            .replace(/[àÀáÁâÂãäÄÅåª]+/g, 'a') // Special Characters #1
            .replace(/[èÈéÉêÊëË]+/g, 'e') // Special Characters #2
            .replace(/[ìÌíÍîÎïÏ]+/g, 'i') // Special Characters #3
            .replace(/[òÒóÓôÔõÕöÖº]+/g, 'o') // Special Characters #4
            .replace(/[ùÙúÚûÛüÜ]+/g, 'u') // Special Characters #5
            .replace(/[ýÝÿŸ]+/g, 'y') // Special Characters #6
            .replace(/[ñÑ]+/g, 'n') // Special Characters #7
            .replace(/[çÇ]+/g, 'c') // Special Characters #8
            .replace(/[ß]+/g, 'ss') // Special Characters #9
            .replace(/[Ææ]+/g, 'ae') // Special Characters #10
            .replace(/[Øøœ]+/g, 'oe') // Special Characters #11
            .replace(/[%]+/g, 'pct') // Special Characters #12
            .replace(/\s+/g, '-') // Replace spaces with -
            .replace(/[^\w\-]+/g, '') // Remove all non-word chars
            .replace(/\-\-+/g, '-') // Replace multiple - with single -
            .replace(/^-+/, '') // Trim - from start of text
            .replace(/-+$/, ''); // Trim - from end of text;
    };
    /**
     * @param {?} text
     * @return {?}
     */
    AOString.keywords = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        if (Array.isArray(text)) {
            text = text.join(' ');
        }
        return AOString.trim(text.toString())
            .split(' ')
            .map((/**
         * @param {?} part
         * @return {?}
         */
        function (part) { return AOString.slug(part); }))
            .reduce((/**
         * @param {?} acc
         * @param {?} val
         * @return {?}
         */
        function (acc, val) { return acc.concat([val].concat(val.split('-'))); }), [])
            .filter((/**
         * @param {?} value
         * @param {?} index
         * @param {?} self
         * @return {?}
         */
        function (value, index, self) {
            return self.indexOf(value) === index;
        }));
    };
    return AOString;
}());
export { AOString };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tc3RyaW5nLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW8tYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9hby1zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7SUFBQTtJQWtEQSxDQUFDOzs7OztJQWhEUSxvQkFBVzs7OztJQUFsQixVQUFtQixJQUFJO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFTSxhQUFJOzs7O0lBQVgsVUFBWSxJQUFJO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyRCxDQUFDOzs7OztJQUVNLG9CQUFXOzs7O0lBQWxCLFVBQW1CLElBQVk7UUFDN0IsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFTSxhQUFJOzs7O0lBQVgsVUFBWSxJQUFJO1FBQ2QsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFO2FBQ2pDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBRyx3QkFBd0I7YUFDM0QsT0FBTyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBTyx3QkFBd0I7YUFDM0QsT0FBTyxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBTyx3QkFBd0I7YUFDM0QsT0FBTyxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFJLHdCQUF3QjthQUMzRCxPQUFPLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFPLHdCQUF3QjthQUMzRCxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFTLHdCQUF3QjthQUN6RCxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFVLHdCQUF3QjthQUN4RCxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFVLHdCQUF3QjthQUN4RCxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFVLHdCQUF3QjthQUN4RCxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFVLHlCQUF5QjthQUMxRCxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFTLHlCQUF5QjthQUMxRCxPQUFPLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFVLHlCQUF5QjthQUMxRCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFhLHdCQUF3QjthQUN6RCxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFTLDRCQUE0QjthQUM3RCxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFXLG1DQUFtQzthQUNwRSxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFlLDRCQUE0QjthQUM3RCxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQWMsMkJBQTJCO0lBQ2pFLENBQUM7Ozs7O0lBRU0saUJBQVE7Ozs7SUFBZixVQUFnQixJQUF1QjtRQUVyQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7UUFFRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ2xDLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixHQUFHOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFuQixDQUFtQixFQUFDO2FBQ2hDLE1BQU07Ozs7O1FBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRyxJQUFLLE9BQUEsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBeEMsQ0FBd0MsR0FBRSxFQUFFLENBQUM7YUFDbEUsTUFBTTs7Ozs7O1FBQUMsVUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUk7WUFDekIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssQ0FBQztRQUN2QyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7SUFFSCxlQUFDO0FBQUQsQ0FBQyxBQWxERCxJQWtEQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBkeW5hbWljXHJcblxyXG5leHBvcnQgY2xhc3MgQU9TdHJpbmcge1xyXG5cclxuICBzdGF0aWMgb25seU51bWJlcnModGV4dCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xcRC9nLCAnJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdHJpbSh0ZXh0KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWFkaW5nVGltZSh0ZXh0OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0ZXh0Lmxlbmd0aCAqIDAuMiAqIDEwMDA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2x1Zyh0ZXh0KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAucmVwbGFjZSgvW8Ogw4DDocOBw6LDgsOjw6TDhMOFw6XCql0rL2csICdhJykgICAvLyBTcGVjaWFsIENoYXJhY3RlcnMgIzFcclxuICAgICAgLnJlcGxhY2UoL1vDqMOIw6nDicOqw4rDq8OLXSsvZywgJ2UnKSAgICAgICAvLyBTcGVjaWFsIENoYXJhY3RlcnMgIzJcclxuICAgICAgLnJlcGxhY2UoL1vDrMOMw63DjcOuw47Dr8OPXSsvZywgJ2knKSAgICAgICAvLyBTcGVjaWFsIENoYXJhY3RlcnMgIzNcclxuICAgICAgLnJlcGxhY2UoL1vDssOSw7PDk8O0w5TDtcOVw7bDlsK6XSsvZywgJ28nKSAgICAvLyBTcGVjaWFsIENoYXJhY3RlcnMgIzRcclxuICAgICAgLnJlcGxhY2UoL1vDucOZw7rDmsO7w5vDvMOcXSsvZywgJ3UnKSAgICAgICAvLyBTcGVjaWFsIENoYXJhY3RlcnMgIzVcclxuICAgICAgLnJlcGxhY2UoL1vDvcOdw7/FuF0rL2csICd5JykgICAgICAgXHRcdC8vIFNwZWNpYWwgQ2hhcmFjdGVycyAjNlxyXG4gICAgICAucmVwbGFjZSgvW8Oxw5FdKy9nLCAnbicpICAgICAgIFx0XHRcdC8vIFNwZWNpYWwgQ2hhcmFjdGVycyAjN1xyXG4gICAgICAucmVwbGFjZSgvW8Onw4ddKy9nLCAnYycpICAgICAgIFx0XHRcdC8vIFNwZWNpYWwgQ2hhcmFjdGVycyAjOFxyXG4gICAgICAucmVwbGFjZSgvW8OfXSsvZywgJ3NzJykgICAgICAgXHRcdFx0Ly8gU3BlY2lhbCBDaGFyYWN0ZXJzICM5XHJcbiAgICAgIC5yZXBsYWNlKC9bw4bDpl0rL2csICdhZScpICAgICAgIFx0XHRcdC8vIFNwZWNpYWwgQ2hhcmFjdGVycyAjMTBcclxuICAgICAgLnJlcGxhY2UoL1vDmMO4xZNdKy9nLCAnb2UnKSAgICAgICBcdFx0Ly8gU3BlY2lhbCBDaGFyYWN0ZXJzICMxMVxyXG4gICAgICAucmVwbGFjZSgvWyVdKy9nLCAncGN0JykgICAgICAgXHRcdFx0Ly8gU3BlY2lhbCBDaGFyYWN0ZXJzICMxMlxyXG4gICAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpICAgICAgICAgICBcdFx0Ly8gUmVwbGFjZSBzcGFjZXMgd2l0aCAtXHJcbiAgICAgIC5yZXBsYWNlKC9bXlxcd1xcLV0rL2csICcnKSAgICAgICBcdFx0Ly8gUmVtb3ZlIGFsbCBub24td29yZCBjaGFyc1xyXG4gICAgICAucmVwbGFjZSgvXFwtXFwtKy9nLCAnLScpICAgICAgICAgXHRcdC8vIFJlcGxhY2UgbXVsdGlwbGUgLSB3aXRoIHNpbmdsZSAtXHJcbiAgICAgIC5yZXBsYWNlKC9eLSsvLCAnJykgICAgICAgICAgICAgXHRcdC8vIFRyaW0gLSBmcm9tIHN0YXJ0IG9mIHRleHRcclxuICAgICAgLnJlcGxhY2UoLy0rJC8sICcnKTsgICAgICAgICAgICBcdFx0Ly8gVHJpbSAtIGZyb20gZW5kIG9mIHRleHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMga2V5d29yZHModGV4dDogc3RyaW5nIHwgc3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcblxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGV4dCkpIHtcclxuICAgICAgdGV4dCA9IHRleHQuam9pbignICcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBBT1N0cmluZy50cmltKHRleHQudG9TdHJpbmcoKSlcclxuICAgICAgLnNwbGl0KCcgJylcclxuICAgICAgLm1hcChwYXJ0ID0+IEFPU3RyaW5nLnNsdWcocGFydCkpXHJcbiAgICAgIC5yZWR1Y2UoKGFjYywgdmFsKSA9PiBhY2MuY29uY2F0KFt2YWxdLmNvbmNhdCh2YWwuc3BsaXQoJy0nKSkpLCBbXSlcclxuICAgICAgLmZpbHRlcigodmFsdWUsIGluZGV4LCBzZWxmKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==