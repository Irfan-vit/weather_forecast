/**
 * @fileoverview added by tsickle
 * Generated from: lib/guards/ao-user.guard.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { NavController } from '@ionic/angular';
import { AOAuthService } from '../services/ao-auth.service';
import { AOSubscriptions } from '../utils/ao-subscriptions';
export class AOUserGuard {
    /**
     * @param {?} _router
     * @param {?} _nav
     * @param {?} _zone
     * @param {?} _auth
     */
    constructor(_router, _nav, _zone, _auth) {
        this._router = _router;
        this._nav = _nav;
        this._zone = _zone;
        this._auth = _auth;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return this.can(route, state);
    }
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    canActivateChild(childRoute, state) {
        return this.can(childRoute, state);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    can(route, state) {
        if (this._auth.isGuest()) {
            this._auth.setRedirect(state.url);
            return this._router.createUrlTree(['/login']);
        }
        this._subscriptions.add('logout', AOAuthService._onLogout.subscribe((/**
         * @return {?}
         */
        () => {
            this._subscriptions.stop();
            this._zone.run((/**
             * @return {?}
             */
            () => {
                this._nav.navigateRoot('/login');
            }));
        })));
        this._subscriptions.add('route', this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationEnd && event.url !== state.url) {
                this._subscriptions.stop();
            }
        })));
        return true;
    }
}
AOUserGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AOUserGuard.ctorParameters = () => [
    { type: Router },
    { type: NavController },
    { type: NgZone },
    { type: AOAuthService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._router;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._nav;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOUserGuard.prototype._auth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tdXNlci5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FvLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvZ3VhcmRzL2FvLXVzZXIuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBSUwsYUFBYSxFQUNiLE1BQU0sRUFHUCxNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRzVELE1BQU0sT0FBTyxXQUFXOzs7Ozs7O0lBSXRCLFlBQ1UsT0FBZSxFQUNmLElBQW1CLEVBQ25CLEtBQWEsRUFDYixLQUFvQjtRQUhwQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2YsU0FBSSxHQUFKLElBQUksQ0FBZTtRQUNuQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsVUFBSyxHQUFMLEtBQUssQ0FBZTtRQU50QixtQkFBYyxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO0lBUWhFLENBQUM7Ozs7OztJQUVELFdBQVcsQ0FDVCxLQUE2QixFQUM3QixLQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUNkLFVBQWtDLEVBQ2xDLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7O0lBRUQsR0FBRyxDQUNELEtBQTZCLEVBQzdCLEtBQTBCO1FBRTFCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDL0M7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLFNBQVMsQ0FBQyxTQUFTOzs7UUFBQyxHQUFHLEVBQUU7WUFDdkUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7OztZQUFDLEdBQUcsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkMsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNyRSxJQUFJLEtBQUssWUFBWSxhQUFhLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFO2dCQUM3RCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUVKLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7O1lBbERGLFVBQVU7Ozs7WUFWVCxNQUFNO1lBS0MsYUFBYTtZQVhELE1BQU07WUFhbEIsYUFBYTs7Ozs7OztJQU1wQixxQ0FBZ0U7Ozs7O0lBRzlELDhCQUF1Qjs7Ozs7SUFDdkIsMkJBQTJCOzs7OztJQUMzQiw0QkFBcUI7Ozs7O0lBQ3JCLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgQ2FuQWN0aXZhdGUsXHJcbiAgQ2FuQWN0aXZhdGVDaGlsZCxcclxuICBOYXZpZ2F0aW9uRW5kLFxyXG4gIFJvdXRlcixcclxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxyXG4gIFVybFRyZWVcclxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9pbnRlcm5hbC9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgTmF2Q29udHJvbGxlciB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcclxuXHJcbmltcG9ydCB7IEFPQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hby1hdXRoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBT1N1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi91dGlscy9hby1zdWJzY3JpcHRpb25zJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFPVXNlckd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQge1xyXG5cclxuICBwcml2YXRlIF9zdWJzY3JpcHRpb25zOiBBT1N1YnNjcmlwdGlvbnMgPSBuZXcgQU9TdWJzY3JpcHRpb25zKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfcm91dGVyOiBSb3V0ZXIsXHJcbiAgICBwcml2YXRlIF9uYXY6IE5hdkNvbnRyb2xsZXIsXHJcbiAgICBwcml2YXRlIF96b25lOiBOZ1pvbmUsXHJcbiAgICBwcml2YXRlIF9hdXRoOiBBT0F1dGhTZXJ2aWNlXHJcbiAgKSB7XHJcbiAgfVxyXG5cclxuICBjYW5BY3RpdmF0ZShcclxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcclxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPiB8IFByb21pc2U8Ym9vbGVhbiB8IFVybFRyZWU+IHwgYm9vbGVhbiB8IFVybFRyZWUge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FuKHJvdXRlLCBzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBjYW5BY3RpdmF0ZUNoaWxkKFxyXG4gICAgY2hpbGRSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XHJcbiAgKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgVXJsVHJlZT4gfCBQcm9taXNlPGJvb2xlYW4gfCBVcmxUcmVlPiB8IGJvb2xlYW4gfCBVcmxUcmVlIHtcclxuICAgIHJldHVybiB0aGlzLmNhbihjaGlsZFJvdXRlLCBzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBjYW4oXHJcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcclxuICAgIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90XHJcbiAgKSB7XHJcbiAgICBpZiAodGhpcy5fYXV0aC5pc0d1ZXN0KCkpIHtcclxuICAgICAgdGhpcy5fYXV0aC5zZXRSZWRpcmVjdChzdGF0ZS51cmwpO1xyXG4gICAgICByZXR1cm4gdGhpcy5fcm91dGVyLmNyZWF0ZVVybFRyZWUoWycvbG9naW4nXSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5hZGQoJ2xvZ291dCcsIEFPQXV0aFNlcnZpY2UuX29uTG9nb3V0LnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3RvcCgpO1xyXG4gICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fbmF2Lm5hdmlnYXRlUm9vdCgnL2xvZ2luJyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSkpO1xyXG5cclxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkKCdyb3V0ZScsIHRoaXMuX3JvdXRlci5ldmVudHMuc3Vic2NyaWJlKGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCAmJiBldmVudC51cmwgIT09IHN0YXRlLnVybCkge1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3RvcCgpO1xyXG4gICAgICB9XHJcbiAgICB9KSk7XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=