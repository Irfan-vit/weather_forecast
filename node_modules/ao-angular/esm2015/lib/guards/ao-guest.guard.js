/**
 * @fileoverview added by tsickle
 * Generated from: lib/guards/ao-guest.guard.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { NavController } from '@ionic/angular';
import { AOAuthService } from '../services/ao-auth.service';
import { AOSubscriptions } from '../utils/ao-subscriptions';
export class AOGuestGuard {
    /**
     * @param {?} _router
     * @param {?} _nav
     * @param {?} _zone
     * @param {?} _auth
     */
    constructor(_router, _nav, _zone, _auth) {
        this._router = _router;
        this._nav = _nav;
        this._zone = _zone;
        this._auth = _auth;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return this.can(route, state);
    }
    /**
     * @param {?} childRoute
     * @param {?} state
     * @return {?}
     */
    canActivateChild(childRoute, state) {
        return this.can(childRoute, state);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    can(route, state) {
        if (this._auth.isUser() && state.url !== '/login') {
            return this._router.createUrlTree(['/']);
        }
        this._subscriptions.add('login', AOAuthService._onLogin.subscribe((/**
         * @return {?}
         */
        () => {
            this._subscriptions.stop();
            this._zone.run((/**
             * @return {?}
             */
            () => {
                this._nav.navigateRoot('/');
            }));
        })));
        this._subscriptions.add('route', this._router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationEnd && event.url !== state.url) {
                this._subscriptions.stop();
            }
        })));
        return true;
    }
}
AOGuestGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AOGuestGuard.ctorParameters = () => [
    { type: Router },
    { type: NavController },
    { type: NgZone },
    { type: AOAuthService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._router;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._nav;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOGuestGuard.prototype._auth;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tZ3Vlc3QuZ3VhcmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hby1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2d1YXJkcy9hby1ndWVzdC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFJTCxhQUFhLEVBQ2IsTUFBTSxFQUdQLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHNUQsTUFBTSxPQUFPLFlBQVk7Ozs7Ozs7SUFJdkIsWUFDVSxPQUFlLEVBQ2YsSUFBbUIsRUFDbkIsS0FBYSxFQUNiLEtBQW9CO1FBSHBCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixTQUFJLEdBQUosSUFBSSxDQUFlO1FBQ25CLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDYixVQUFLLEdBQUwsS0FBSyxDQUFlO1FBTnRCLG1CQUFjLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7SUFRaEUsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUNULEtBQTZCLEVBQzdCLEtBQTBCO1FBRTFCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7O0lBRUQsZ0JBQWdCLENBQ2QsVUFBa0MsRUFDbEMsS0FBMEI7UUFFMUIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFFRCxHQUFHLENBQ0QsS0FBNkIsRUFDN0IsS0FBMEI7UUFFMUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxRQUFRLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQ3JFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckUsSUFBSSxLQUFLLFlBQVksYUFBYSxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRTtnQkFDN0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUM1QjtRQUNILENBQUMsRUFBQyxDQUFDLENBQUM7UUFFSixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7OztZQWpERixVQUFVOzs7O1lBVlQsTUFBTTtZQUtDLGFBQWE7WUFYRCxNQUFNO1lBYWxCLGFBQWE7Ozs7Ozs7SUFNcEIsc0NBQWdFOzs7OztJQUc5RCwrQkFBdUI7Ozs7O0lBQ3ZCLDRCQUEyQjs7Ozs7SUFDM0IsNkJBQXFCOzs7OztJQUNyQiw2QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gIENhbkFjdGl2YXRlLFxyXG4gIENhbkFjdGl2YXRlQ2hpbGQsXHJcbiAgTmF2aWdhdGlvbkVuZCxcclxuICBSb3V0ZXIsXHJcbiAgUm91dGVyU3RhdGVTbmFwc2hvdCxcclxuICBVcmxUcmVlXHJcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvaW50ZXJuYWwvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IE5hdkNvbnRyb2xsZXIgfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XHJcblxyXG5pbXBvcnQgeyBBT0F1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYW8tYXV0aC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQU9TdWJzY3JpcHRpb25zIH0gZnJvbSAnLi4vdXRpbHMvYW8tc3Vic2NyaXB0aW9ucyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBT0d1ZXN0R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSwgQ2FuQWN0aXZhdGVDaGlsZCB7XHJcblxyXG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbnM6IEFPU3Vic2NyaXB0aW9ucyA9IG5ldyBBT1N1YnNjcmlwdGlvbnMoKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIF9yb3V0ZXI6IFJvdXRlcixcclxuICAgIHByaXZhdGUgX25hdjogTmF2Q29udHJvbGxlcixcclxuICAgIHByaXZhdGUgX3pvbmU6IE5nWm9uZSxcclxuICAgIHByaXZhdGUgX2F1dGg6IEFPQXV0aFNlcnZpY2VcclxuICApIHtcclxuICB9XHJcblxyXG4gIGNhbkFjdGl2YXRlKFxyXG4gICAgcm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXHJcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxyXG4gICk6IE9ic2VydmFibGU8Ym9vbGVhbiB8IFVybFRyZWU+IHwgUHJvbWlzZTxib29sZWFuIHwgVXJsVHJlZT4gfCBib29sZWFuIHwgVXJsVHJlZSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW4ocm91dGUsIHN0YXRlKTtcclxuICB9XHJcblxyXG4gIGNhbkFjdGl2YXRlQ2hpbGQoXHJcbiAgICBjaGlsZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcclxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPiB8IFByb21pc2U8Ym9vbGVhbiB8IFVybFRyZWU+IHwgYm9vbGVhbiB8IFVybFRyZWUge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FuKGNoaWxkUm91dGUsIHN0YXRlKTtcclxuICB9XHJcblxyXG4gIGNhbihcclxuICAgIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxyXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3RcclxuICApIHtcclxuICAgIGlmICh0aGlzLl9hdXRoLmlzVXNlcigpICYmIHN0YXRlLnVybCAhPT0gJy9sb2dpbicpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX3JvdXRlci5jcmVhdGVVcmxUcmVlKFsnLyddKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZCgnbG9naW4nLCBBT0F1dGhTZXJ2aWNlLl9vbkxvZ2luLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3RvcCgpO1xyXG4gICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fbmF2Lm5hdmlnYXRlUm9vdCgnLycpO1xyXG4gICAgICB9KTtcclxuICAgIH0pKTtcclxuXHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZCgncm91dGUnLCB0aGlzLl9yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZShldmVudCA9PiB7XHJcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgJiYgZXZlbnQudXJsICE9PSBzdGF0ZS51cmwpIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zLnN0b3AoKTtcclxuICAgICAgfVxyXG4gICAgfSkpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbn1cclxuIl19