/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ao-is-user/ao-is-user.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, NgZone, TemplateRef, ViewContainerRef } from '@angular/core';
import { AOAuthService } from '../../services/ao-auth.service';
import { AOSubscriptions } from '../../utils/ao-subscriptions';
export class AOIsUserDirective {
    /**
     * @param {?} _element
     * @param {?} _templateRef
     * @param {?} _viewContainer
     * @param {?} _zone
     */
    constructor(_element, _templateRef, _viewContainer, _zone) {
        this._element = _element;
        this._templateRef = _templateRef;
        this._viewContainer = _viewContainer;
        this._zone = _zone;
        this._subscriptions = new AOSubscriptions();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._subscriptions.add('status', AOAuthService._onChange.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        status => {
            this._zone.run((/**
             * @return {?}
             */
            () => {
                status
                    ? this._viewContainer.createEmbeddedView(this._templateRef)
                    : this._viewContainer.clear();
            }));
        })));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscriptions.stop();
    }
}
AOIsUserDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ao-is-user]'
            },] }
];
/** @nocollapse */
AOIsUserDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: NgZone }
];
AOIsUserDirective.propDecorators = {
    aoIsUser: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._subscriptions;
    /** @type {?} */
    AOIsUserDirective.prototype.aoIsUser;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._templateRef;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    AOIsUserDirective.prototype._zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8taXMtdXNlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hby1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvYW8taXMtdXNlci9hby1pcy11c2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQXFCLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2SCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSy9ELE1BQU0sT0FBTyxpQkFBaUI7Ozs7Ozs7SUFNNUIsWUFDVSxRQUFvQixFQUNwQixZQUE4QixFQUM5QixjQUFnQyxFQUNoQyxLQUFhO1FBSGIsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFDOUIsbUJBQWMsR0FBZCxjQUFjLENBQWtCO1FBQ2hDLFVBQUssR0FBTCxLQUFLLENBQVE7UUFSZixtQkFBYyxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO0lBVWhFLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUzs7OztRQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzNFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7O1lBQUMsR0FBRyxFQUFFO2dCQUNsQixNQUFNO29CQUNKLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7b0JBQzNELENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2xDLENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7WUE3QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxjQUFjO2FBQ3pCOzs7O1lBUG1CLFVBQVU7WUFBb0MsV0FBVztZQUFFLGdCQUFnQjtZQUF4RCxNQUFNOzs7dUJBWTFDLEtBQUs7Ozs7Ozs7SUFGTiwyQ0FBZ0U7O0lBRWhFLHFDQUFrQjs7Ozs7SUFHaEIscUNBQTRCOzs7OztJQUM1Qix5Q0FBc0M7Ozs7O0lBQ3RDLDJDQUF3Qzs7Ozs7SUFDeEMsa0NBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEFPQXV0aFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hby1hdXRoLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBBT1N1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi8uLi91dGlscy9hby1zdWJzY3JpcHRpb25zJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FvLWlzLXVzZXJdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQU9Jc1VzZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gIHByaXZhdGUgX3N1YnNjcmlwdGlvbnM6IEFPU3Vic2NyaXB0aW9ucyA9IG5ldyBBT1N1YnNjcmlwdGlvbnMoKTtcclxuXHJcbiAgQElucHV0KCkgYW9Jc1VzZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgX3RlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgcHJpdmF0ZSBfdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHByaXZhdGUgX3pvbmU6IE5nWm9uZVxyXG4gICkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmFkZCgnc3RhdHVzJywgQU9BdXRoU2VydmljZS5fb25DaGFuZ2Uuc3Vic2NyaWJlKHN0YXR1cyA9PiB7XHJcbiAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICBzdGF0dXNcclxuICAgICAgICAgID8gdGhpcy5fdmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fdGVtcGxhdGVSZWYpXHJcbiAgICAgICAgICA6IHRoaXMuX3ZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuc3RvcCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19