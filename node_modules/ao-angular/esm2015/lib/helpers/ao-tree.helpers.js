/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/ao-tree.helpers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class AONodeItem {
    constructor() {
        this.level = 0;
        this.expanded = false;
    }
    /**
     * @return {?}
     */
    isExpanded() {
        return this.expanded;
    }
    /**
     * @return {?}
     */
    isExpandable() {
        return this.children.length > 0;
    }
}
if (false) {
    /** @type {?} */
    AONodeItem.prototype.data;
    /** @type {?} */
    AONodeItem.prototype.level;
    /** @type {?} */
    AONodeItem.prototype.children;
    /** @type {?} */
    AONodeItem.prototype.expanded;
}
export class AOTreeHelper {
    /**
     * @param {?} _zone
     */
    constructor(_zone) {
        this._zone = _zone;
        this.map = new Map();
        this.tree = [];
    }
    //--------------------------------------------------------------------------------------------------------------------
    // STATIC METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @param {?=} map
     * @param {?=} fk_name
     * @param {?=} pk_name
     * @return {?}
     */
    static listToTree(items, map, fk_name = 'parent_id', pk_name = 'id') {
        //
        // inicializa o map, se ainda nao tiver sido inicializado
        //
        if (map == undefined) {
            map = new Map();
        }
        //
        // funcao para criar todos os nodes necessarios
        //
        /** @type {?} */
        const create = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            let node = map.get(data[pk_name]);
            if (node == undefined) {
                node = new AONodeItem();
            }
            node.data = data;
            node.children = [];
            map.set(data[pk_name], node);
            return node;
        });
        //
        // aninha todos os nodes do map
        //
        /** @type {?} */
        const nest = (/**
         * @param {?} root
         * @param {?} node
         * @return {?}
         */
        (root, node) => {
            /** @type {?} */
            const parent = node.data[fk_name] ? map.get(node.data[fk_name]) : undefined;
            if (parent) {
                node.level = parent.level + 1;
                parent.children.push(node);
            }
            else {
                root.push(node);
            }
            return root;
        });
        return {
            map, tree: items.map(create).reduce(nest, [])
        };
    }
    /**
     * @param {?} tree
     * @return {?}
     */
    static flatTree(tree) {
        /** @type {?} */
        const flat = (/**
         * @param {?} nodes
         * @param {?} node
         * @return {?}
         */
        (nodes, node) => {
            nodes.push(node);
            return node.children.length > 0
                ? node.children.reduce(flat, nodes)
                : nodes;
        });
        return tree.reduce(flat, []);
    }
    //--------------------------------------------------------------------------------------------------------------------
    // OBJECT METHODS
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} items
     * @return {?}
     */
    setItems(items) {
        this._zone.run((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const response = AOTreeHelper.listToTree(items, this.map);
            this.map = response.map;
            this.tree = response.tree;
        }));
    }
    /**
     * @return {?}
     */
    getRoot() {
        return this.tree;
    }
    ;
    /**
     * @param {?=} node
     * @return {?}
     */
    getChildren(node) {
        return node ? node.children : this.getRoot();
    }
    ;
    /**
     * @param {?=} node
     * @return {?}
     */
    getDescendants(node) {
        return AOTreeHelper.flatTree(node ? node.children : this.getRoot());
    }
    ;
    /**
     * @param {?} node
     * @return {?}
     */
    getParent(node) {
        return this.map.get(node.data.parent_id);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getParents(node) {
        /** @type {?} */
        const parent = this.getParent(node);
        return parent ? [parent, ...this.getParents(parent)] : [];
    }
    /**
     * @param {?=} node
     * @return {?}
     */
    getBrothers(node) {
        /** @type {?} */
        const parent = this.getParent(node);
        return parent ? parent.children : this.getRoot();
    }
    /**
     * @param {?} node
     * @return {?}
     */
    isVisible(node) {
        /** @type {?} */
        const parent = this.getParent(node);
        return parent ? parent.expanded : true;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    tootle(node) {
        if (node.expanded) {
            [node, ...this.getDescendants(node)].map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.expanded = false));
        }
        else {
            node.expanded = true;
        }
        return node.expanded;
    }
    /**
     * @return {?}
     */
    expandAll() {
        this.getDescendants().map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.expanded = true));
    }
    /**
     * @return {?}
     */
    contractAll() {
        this.getDescendants().map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.expanded = false));
    }
    /**
     * @param {?=} node
     * @return {?}
     */
    getNextOrder(node) {
        /** @type {?} */
        const children = this.getChildren(node);
        return children.length === 0 ? 0 : children.slice(-1)[0].data.order + 1;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getNavigate(node) {
        /** @type {?} */
        const brothers = this.getBrothers(node);
        /** @type {?} */
        const locate = (/**
         * @param {?} navigate
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (navigate, item, index) => {
            if (node.data.id === item.data.id) {
                navigate.previous = index > 0 ? brothers[index - 1] : null;
                navigate.next = index < brothers.length ? brothers[index + 1] : null;
            }
            return navigate;
        });
        return brothers.reduce(locate, { previous: null, current: node, next: null });
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getPrevious(node) {
        return this.getNavigate(node).previous;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    getNext(node) {
        return this.getNavigate(node).next;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype.map;
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype.tree;
    /**
     * @type {?}
     * @private
     */
    AOTreeHelper.prototype._zone;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,