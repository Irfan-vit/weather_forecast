/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/ao-faunadb-pagination.helper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as FaunaDB from 'faunadb';
export class AOFaunaDBPaginationHelper {
    /**
     * @param {?} _ao
     * @param {?} _db
     */
    constructor(_ao, _db) {
        this._ao = _ao;
        this._db = _db;
        this._filters_show = true;
        this._filters_model = {};
        this._filters = {};
        this._size = 20;
    }
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?=} filters
     * @return {?}
     */
    filters(filters) {
        if (filters) {
            this._filters_model = Object.assign({}, filters);
            this._filters = Object.assign({}, filters);
            return this;
        }
        return this._filters;
    }
    /**
     * @return {?}
     */
    openFilters() {
        this._filters_show = true;
    }
    /**
     * @return {?}
     */
    closeFilters() {
        this._filters_show = false;
    }
    /**
     * @return {?}
     */
    toggleFilters() {
        this._filters_show = !this._filters_show;
    }
    /**
     * @return {?}
     */
    showFilters() {
        return this._filters_show;
    }
    /**
     * @return {?}
     */
    hideFilters() {
        return !this._filters_show;
    }
    /**
     * @return {?}
     */
    hasFilters() {
        return Object
            .keys(this._filters_model)
            .filter((/**
         * @param {?} key
         * @return {?}
         */
        key => this._filters_model[key] !== this._filters[key]))
            .length > 0;
    }
    /**
     * @return {?}
     */
    resetFilters() {
        this._filters = Object.assign({}, this._filters_model);
        this.openFilters();
    }
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} columns
     * @return {THIS}
     */
    select(columns) {
        return ((/** @type {?} */ (this))._columns = [...columns]) && (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} query
     * @return {THIS}
     */
    query(query) {
        return ((/** @type {?} */ (this))._query = query) && (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    search() {
        this._last_after = undefined;
        this._refresh = undefined;
        this._search = this._query(FaunaDB.query, Object.assign({}, this.filters()));
        return this.first();
    }
    /**
     * @return {?}
     */
    first() {
        return this.paginate(this._search, {
            size: this._size,
            before: undefined,
            after: undefined,
        });
    }
    /**
     * @return {?}
     */
    previous() {
        return this.paginate(this._search, {
            size: this._size,
            after: undefined,
            before: this._response.before,
        });
    }
    /**
     * @return {?}
     */
    next() {
        return this.paginate(this._search, {
            size: this._size,
            after: this._response.after,
            before: undefined,
        });
    }
    /**
     * @return {?}
     */
    last() {
        return this.paginate(this._search, {
            size: this._size,
            after: this._last_after,
            before: undefined,
        });
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    refresh(event) {
        /** @type {?} */
        let promise;
        if (this.empty()) {
            if (this._response) {
                promise = this.previous();
            }
            else {
                promise = this.search();
            }
        }
        else {
            promise = this.paginate(this._search, this._refresh);
        }
        return promise.then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            event ? event.target.complete() : null;
            return response;
        }));
    }
    /**
     * @private
     * @param {?} set
     * @param {?=} opts
     * @return {?}
     */
    paginate(set, opts) {
        this._refresh = Object.assign({}, opts);
        /** @type {?} */
        let paginate = FaunaDB.query.Paginate(set, opts);
        if (this._columns) {
            paginate = FaunaDB.query.Map(paginate, (/**
             * @param {?} item
             * @return {?}
             */
            item => this._columns.reduce((/**
             * @param {?} select
             * @param {?} column
             * @param {?} index
             * @return {?}
             */
            (select, column, index) => (select[column] = FaunaDB.query.Select(index + 1, item)) && select), {})));
        }
        return this._db.query((/**
         * @return {?}
         */
        () => paginate))
            .then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (this._response && this._response.after && !response.after) {
                this._last_after = this._response.after;
            }
            this._response = response;
            this.closeFilters();
        })).catch((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this._ao.danger('Oops! Falha ao realizar a buscar :(', { error });
        }));
    }
    /**
     * @return {?}
     */
    hasPrevious() {
        return !!(this._response && this._response.before);
    }
    /**
     * @return {?}
     */
    hasNext() {
        return !!(this._response && this._response.after);
    }
    /**
     * @return {?}
     */
    hasLast() {
        return !!this._last_after;
    }
    /**
     * @return {?}
     */
    isFirst() {
        return !this.hasPrevious();
    }
    /**
     * @return {?}
     */
    isLast() {
        return !this.hasNext();
    }
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    response() {
        return this._response ? this._response : null;
    }
    /**
     * @return {?}
     */
    items() {
        return this._response && this._response.data ? this._response.data : [];
    }
    /**
     * @return {?}
     */
    empty() {
        return this.items().length === 0;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._filters_show;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._filters_model;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._query;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._search;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._size;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._response;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._last_after;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._refresh;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._ao;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDBPaginationHelper.prototype._db;
}
//# sourceMappingURL=data:application/json;base64,