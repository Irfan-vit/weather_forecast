/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-array.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AOString } from './ao-string';
// @dynamic
export class AOArray {
    /**
     * @param {?} items
     * @return {?}
     */
    static flat(items) {
        return items.reduce((/**
         * @param {?} acc
         * @param {?} val
         * @return {?}
         */
        (acc, val) => Array.isArray(val) ? acc.concat(this.flat(val)) : acc.concat(val)), []);
    }
    /**
     * @param {?} array
     * @return {?}
     */
    static distict(array) {
        return array.filter((/**
         * @param {?} value
         * @param {?} index
         * @param {?} self
         * @return {?}
         */
        (value, index, self) => {
            return self.indexOf(value) === index;
        }));
    }
    /**
     * @param {?} items
     * @return {?}
     */
    static slug(items) {
        return items.map((/**
         * @param {?} item
         * @return {?}
         */
        item => AOString.slug(item)));
    }
    /**
     * @param {?} items
     * @return {?}
     */
    static keywords(items) {
        return this.distict(this.flat(items).reduce((/**
         * @param {?} acc
         * @param {?} val
         * @return {?}
         */
        (acc, val) => acc.concat(AOString.keywords(val))), []));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tYXJyYXkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hby1hbmd1bGFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2FvLWFycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7QUFJdkMsTUFBTSxPQUFPLE9BQU87Ozs7O0lBRWxCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBWTtRQUN0QixPQUFPLEtBQUssQ0FBQyxNQUFNOzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0csQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUs7UUFDbEIsT0FBTyxLQUFLLENBQUMsTUFBTTs7Ozs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUM7UUFDdkMsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBZTtRQUN6QixPQUFPLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQVk7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU07Ozs7O1FBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FDOUUsQ0FBQztJQUNKLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFPU3RyaW5nIH0gZnJvbSAnLi9hby1zdHJpbmcnO1xyXG5cclxuLy8gQGR5bmFtaWNcclxuXHJcbmV4cG9ydCBjbGFzcyBBT0FycmF5IHtcclxuXHJcbiAgc3RhdGljIGZsYXQoaXRlbXM6IGFueVtdKTogYW55W10ge1xyXG4gICAgcmV0dXJuIGl0ZW1zLnJlZHVjZSgoYWNjLCB2YWwpID0+IEFycmF5LmlzQXJyYXkodmFsKSA/IGFjYy5jb25jYXQodGhpcy5mbGF0KHZhbCkpIDogYWNjLmNvbmNhdCh2YWwpLCBbXSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGlzdGljdChhcnJheSkge1xyXG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigodmFsdWUsIGluZGV4LCBzZWxmKSA9PiB7XHJcbiAgICAgIHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNsdWcoaXRlbXM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IEFPU3RyaW5nLnNsdWcoaXRlbSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGtleXdvcmRzKGl0ZW1zOiBhbnlbXSk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLmRpc3RpY3QoXHJcbiAgICAgIHRoaXMuZmxhdChpdGVtcykucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjLmNvbmNhdChBT1N0cmluZy5rZXl3b3Jkcyh2YWwpKSwgW10pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbn1cclxuIl19