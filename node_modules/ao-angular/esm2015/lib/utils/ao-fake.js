/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-fake.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
export class AOFake {
    /**
     * @param {?} value
     * @param {?=} decimals
     * @return {?}
     */
    static floorDecimal(value, decimals = 2) {
        return Math.floor(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @param {?=} decimals
     * @return {?}
     */
    static randomFloat(min = 0, max = 100, decimals = 2) {
        return Math.floor((min + (Math.random() * (max - min))) * Math.pow(10, decimals)) / Math.pow(10, decimals);
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomInteger(min = 0, max = 100) {
        return Math.floor((min + (Math.random() * (max - min))) * Math.pow(10, 0)) / Math.pow(10, 0);
    }
    /**
     * @param {?=} chars
     * @return {?}
     */
    static randomChar(chars = 'qwertyuiopasdfghjklzxcvbnm1234567890') {
        return chars.charAt(this.randomInteger(0, chars.length - 1));
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomWord(min = 1, max = 10) {
        /** @type {?} */
        const size = this.randomInteger(min, max);
        /** @type {?} */
        let word = '';
        while (word.length < size) {
            word += this.randomChar();
        }
        return word;
    }
    /**
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomWords(min = 1, max = 10) {
        /** @type {?} */
        const qt = this.randomInteger(min, max);
        /** @type {?} */
        const words = [];
        while (words.length < qt) {
            words.push(this.randomWord());
        }
        return words.join(' ');
    }
    /**
     * @param {?=} fator
     * @return {?}
     */
    static randomBoolean(fator = 50) {
        return this.randomInteger() <= fator;
    }
    /**
     * @param {?} elements
     * @return {?}
     */
    static randomElement(elements) {
        return elements[this.randomInteger(0, elements.length - 1)];
    }
    /**
     * @param {?} elements
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    static randomElements(elements, min = 1, max = null) {
        min = min && min > 1 ? Math.floor(min) : 1;
        max = max && max < elements.length ? Math.floor(max) : this.randomInteger(min, elements.length - 1);
        /** @type {?} */
        const qt = this.randomInteger(min, max);
        /** @type {?} */
        const selection = [];
        while (selection.length < qt) {
            selection.push(this.randomElement(elements));
        }
        return selection;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tZmFrZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FvLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvYW8tZmFrZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxNQUFNLE9BQU8sTUFBTTs7Ozs7O0lBRWpCLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsR0FBRyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM3RSxDQUFDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsUUFBUSxHQUFHLENBQUM7UUFDakQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdHLENBQUM7Ozs7OztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRztRQUNyQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0YsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxzQ0FBc0M7UUFDOUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUU7O2NBQzNCLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7O1lBQ3JDLElBQUksR0FBRyxFQUFFO1FBQ2IsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksRUFBRTtZQUN6QixJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUU7O2NBQzVCLEVBQUUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7O2NBQ2pDLEtBQUssR0FBRyxFQUFFO1FBQ2hCLE9BQU8sS0FBSyxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7WUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUMvQjtRQUNELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksS0FBSyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFlO1FBQ2xDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7O0lBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFlLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSTtRQUN4RCxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDOztjQUM5RixFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDOztjQUNqQyxTQUFTLEdBQVUsRUFBRTtRQUMzQixPQUFPLFNBQVMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO1lBQzVCLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGR5bmFtaWNcclxuXHJcbmV4cG9ydCBjbGFzcyBBT0Zha2Uge1xyXG5cclxuICBzdGF0aWMgZmxvb3JEZWNpbWFsKHZhbHVlLCBkZWNpbWFscyA9IDIpIHtcclxuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbHVlICogTWF0aC5wb3coMTAsIGRlY2ltYWxzKSkgLyBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJhbmRvbUZsb2F0KG1pbiA9IDAsIG1heCA9IDEwMCwgZGVjaW1hbHMgPSAyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcigobWluICsgKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkpICogTWF0aC5wb3coMTAsIGRlY2ltYWxzKSkgLyBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJhbmRvbUludGVnZXIobWluID0gMCwgbWF4ID0gMTAwKSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcigobWluICsgKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkpICogTWF0aC5wb3coMTAsIDApKSAvIE1hdGgucG93KDEwLCAwKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByYW5kb21DaGFyKGNoYXJzID0gJ3F3ZXJ0eXVpb3Bhc2RmZ2hqa2x6eGN2Ym5tMTIzNDU2Nzg5MCcpIHtcclxuICAgIHJldHVybiBjaGFycy5jaGFyQXQodGhpcy5yYW5kb21JbnRlZ2VyKDAsIGNoYXJzLmxlbmd0aCAtIDEpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByYW5kb21Xb3JkKG1pbiA9IDEsIG1heCA9IDEwKSB7XHJcbiAgICBjb25zdCBzaXplID0gdGhpcy5yYW5kb21JbnRlZ2VyKG1pbiwgbWF4KTtcclxuICAgIGxldCB3b3JkID0gJyc7XHJcbiAgICB3aGlsZSAod29yZC5sZW5ndGggPCBzaXplKSB7XHJcbiAgICAgIHdvcmQgKz0gdGhpcy5yYW5kb21DaGFyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gd29yZDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByYW5kb21Xb3JkcyhtaW4gPSAxLCBtYXggPSAxMCkge1xyXG4gICAgY29uc3QgcXQgPSB0aGlzLnJhbmRvbUludGVnZXIobWluLCBtYXgpO1xyXG4gICAgY29uc3Qgd29yZHMgPSBbXTtcclxuICAgIHdoaWxlICh3b3Jkcy5sZW5ndGggPCBxdCkge1xyXG4gICAgICB3b3Jkcy5wdXNoKHRoaXMucmFuZG9tV29yZCgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB3b3Jkcy5qb2luKCcgJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmFuZG9tQm9vbGVhbihmYXRvciA9IDUwKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yYW5kb21JbnRlZ2VyKCkgPD0gZmF0b3I7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmFuZG9tRWxlbWVudChlbGVtZW50czogYW55W10pIHtcclxuICAgIHJldHVybiBlbGVtZW50c1t0aGlzLnJhbmRvbUludGVnZXIoMCwgZWxlbWVudHMubGVuZ3RoIC0gMSldO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJhbmRvbUVsZW1lbnRzKGVsZW1lbnRzOiBhbnlbXSwgbWluID0gMSwgbWF4ID0gbnVsbCkge1xyXG4gICAgbWluID0gbWluICYmIG1pbiA+IDEgPyBNYXRoLmZsb29yKG1pbikgOiAxO1xyXG4gICAgbWF4ID0gbWF4ICYmIG1heCA8IGVsZW1lbnRzLmxlbmd0aCA/IE1hdGguZmxvb3IobWF4KSA6IHRoaXMucmFuZG9tSW50ZWdlcihtaW4sIGVsZW1lbnRzLmxlbmd0aCAtIDEpO1xyXG4gICAgY29uc3QgcXQgPSB0aGlzLnJhbmRvbUludGVnZXIobWluLCBtYXgpO1xyXG4gICAgY29uc3Qgc2VsZWN0aW9uOiBhbnlbXSA9IFtdO1xyXG4gICAgd2hpbGUgKHNlbGVjdGlvbi5sZW5ndGggPCBxdCkge1xyXG4gICAgICBzZWxlY3Rpb24ucHVzaCh0aGlzLnJhbmRvbUVsZW1lbnQoZWxlbWVudHMpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzZWxlY3Rpb247XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=