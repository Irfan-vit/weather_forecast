/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ao-validations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AOString } from './ao-string';
// @dynamic
export class AOValidations {
    /**
     * @param {?} value
     * @return {?}
     */
    static isEmail(value) {
        return /^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isFloat(value) {
        return /^-?[\d]+(\.?\d+)?$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isFloat_S(value) {
        return /^-[\d]+(\.?\d+)?$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isFloat_U(value) {
        return /^[\d]+(\.?\d+)?$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isInt(value) {
        return /^-?[\d]+$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isInt_S(value) {
        return /^-[\d]+$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isInt_U(value) {
        return /^[\d]+$/.test(value);
    }
    //
    // (99) 9999-9999
    // (99) 9-9999-9999
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isPhone(value) {
        if (/^\([1-9]{1}[0-9]{1}\) ([0-9]{1}-|)[0-9]{4}-[0-9]{4}$/.test(value) == false)
            return false;
        value = AOString.onlyNumbers(value);
        if (['10', '20', '30', '40', '50', '60', '70', '80', '90'].indexOf(value.substr(0, 2)) >= 0)
            return false;
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isPhoneINTER(value) {
        return /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/im.test(value);
    }
    //
    // 99.999-999
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isZipCode(value) {
        return /^[0-9]{2}\.[0-9]{3}-[0-9]{3}$/.test(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isZipCodeINTER(value) {
        return /^[0-9]{5}(?:-[0-9]{4})?$/.test(value);
    }
    //
    // 999.999.999-99
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isCpf(value) {
        if (/^[0-9]{3}\.[0-9]{3}\.[0-9]{3}-[0-9]{2}$/.test(value) == false)
            return false;
        /** @type {?} */
        const invalided = [
            '00000000000', '11111111111', '22222222222', '33333333333', '44444444444',
            '55555555555', '66666666666', '77777777777', '88888888888', '99999999999'
        ];
        value = AOString.onlyNumbers(value);
        if (!value || value.length != 11 || invalided.indexOf(value) >= 0)
            return false;
        /** @type {?} */
        let soma = 0;
        /** @type {?} */
        let resto;
        for (let i = 1; i <= 9; i++)
            soma = soma + parseInt(value.substring(i - 1, i)) * (11 - i);
        resto = (soma * 10) % 11;
        if ((resto == 10) || (resto == 11))
            resto = 0;
        if (resto != parseInt(value.substring(9, 10)))
            return false;
        soma = 0;
        for (let i = 1; i <= 10; i++)
            soma = soma + parseInt(value.substring(i - 1, i)) * (12 - i);
        resto = (soma * 10) % 11;
        if ((resto == 10) || (resto == 11))
            resto = 0;
        if (resto != parseInt(value.substring(10, 11)))
            return false;
        return true;
    }
    //
    // 99.999.999/9999-99
    //
    /**
     * @param {?} value
     * @return {?}
     */
    static isCnpj(value) {
        if (/^[0-9]{2}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}-[0-9]{2}$/.test(value) == false)
            return false;
        /** @type {?} */
        const invalided = [
            '00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444',
            '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'
        ];
        value = AOString.onlyNumbers(value);
        if (!value || value.length != 14 || invalided.indexOf(value) >= 0)
            return false;
        /** @type {?} */
        let soma = 0;
        /** @type {?} */
        let tamanho = value.length - 2;
        /** @type {?} */
        let numeros = value.substring(0, tamanho);
        /** @type {?} */
        let digitos = value.substring(tamanho);
        /** @type {?} */
        let pos = tamanho - 7;
        for (let i = tamanho; i >= 1; i--) {
            soma += numeros.charAt(tamanho - i) * pos--;
            if (pos < 2)
                pos = 9;
        }
        /** @type {?} */
        let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
        if (resultado != digitos.charAt(0))
            return false;
        soma = 0;
        tamanho = tamanho + 1;
        numeros = value.substring(0, tamanho);
        pos = tamanho - 7;
        for (let i = tamanho; i >= 1; i--) {
            soma += numeros.charAt(tamanho - i) * pos--;
            if (pos < 2)
                pos = 9;
        }
        resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
        if (resultado != digitos.charAt(1))
            return false;
        return true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isCpfCnpj(value) {
        return AOValidations.isCpf(value) || AOValidations.isCnpj(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static isUrl(value) {
        return /^(http?|ftp):\/\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\.)*[a-zA-Z0-9-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\/($|[a-zA-Z0-9.,?'\\+&%$#=~_-]+))*$/
            .test(value);
    }
}
//# sourceMappingURL=data:application/json;base64,