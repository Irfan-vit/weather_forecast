/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-cache.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Md5 } from 'ts-md5';
// @Injectable({
//   providedIn: 'root'
// })
export class AOCacheService {
    /**
     * @param {?} _db
     * @param {?} _storage
     */
    constructor(_db, _storage) {
        this._db = _db;
        this._storage = _storage;
        this._configs = {
            type: 'full',
            // none|local|server|full
            expire: ((24 * 60 * 60) * 1000),
            metadata: {},
        };
    }
    /**
     * @param {?} params
     * @param {?} request
     * @param {?=} configs
     * @return {?}
     */
    find(params, request, configs = {}) {
        configs = (typeof configs === 'object') ? Object.assign({}, this._configs, configs) : Object.assign({}, this._configs);
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            params = JSON.stringify(params);
            /** @type {?} */
            const key = Md5.hashStr(params);
            /** @type {?} */
            const cached = yield this.get(key, configs);
            if (cached) {
                return resolve(cached);
            }
            request().then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield this.set(key, params, response, configs);
                return resolve(response);
            })));
        })));
    }
    /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    get(key, configs) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.log('Cache::get', key);
            /** @type {?} */
            const response = this._storage.retrieve(key);
            /** @type {?} */
            const response_updated_at = this._storage.retrieve(key + '_updated_at');
            if (response != null
                && response_updated_at != null
                && (Date.now() - response_updated_at) <= configs.expire) {
                return JSON.parse(response);
            }
            return yield this.getInServer(key, configs);
        });
    }
    /**
     * @param {?} key
     * @param {?} configs
     * @return {?}
     */
    getInServer(key, configs) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let cached = null;
            try {
                cached = yield this._db.query((/**
                 * @param {?} q
                 * @return {?}
                 */
                q => q.Get(q.Match(q.Index('cache_by_key'), key))));
            }
            catch (e) {
                return null;
            }
            this._storage.store(key, cached.data.response);
            this._storage.store(key + '_updated_at', cached.data.updated_at);
            if ((Date.now() - cached.data.updated_at) > configs.expire) {
                return null;
            }
            return JSON.parse(cached.data.response);
        });
    }
    /**
     * @param {?} key
     * @param {?} request
     * @param {?} response
     * @param {?} configs
     * @return {?}
     */
    set(key, request, response, configs) {
        /** @type {?} */
        const data = {
            key,
            request,
            response: JSON.stringify(response),
            updated_at: Date.now(),
            metadata: configs.metadata
        };
        this._storage.store(key, data.response);
        this._storage.store(key + '_updated_at', data.updated_at);
        return this.setInServer(key, data);
    }
    /**
     * @param {?} key
     * @param {?} data
     * @return {?}
     */
    setInServer(key, data) {
        return this._db.query((/**
         * @param {?} q
         * @return {?}
         */
        q => q.If(q.Exists(q.Match(q.Index('cache_by_key'), key)), q.Update(q.Select(['ref'], q.Get(q.Match(q.Index('cache_by_key'), key))), { data: Object.assign({}, data) }), q.Create(q.Collection('cache'), { data: Object.assign({}, data, { created_at: Date.now() }) }))));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._configs;
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._db;
    /**
     * @type {?}
     * @private
     */
    AOCacheService.prototype._storage;
}
//# sourceMappingURL=data:application/json;base64,