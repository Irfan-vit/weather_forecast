/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-fauna-db.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventEmitter, Inject, Injectable } from '@angular/core';
import { LocalStorageService } from 'ngx-webstorage';
import * as FaunaDB from 'faunadb';
import { AOService } from './ao.service';
import { AOEnvService } from './ao-env.service';
import { AOCacheService } from './ao-cache.service';
import * as i0 from "@angular/core";
import * as i1 from "./ao.service";
import * as i2 from "ngx-webstorage";
import * as i3 from "./ao-env.service";
/** @type {?} */
const _q = FaunaDB.query;
// @dynamic
export class AOFaunaDbService {
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} _ao
     * @param {?} _storage
     * @param {?} _environment
     */
    constructor(_ao, _storage, _environment) {
        this._ao = _ao;
        this._storage = _storage;
        this._environment = _environment;
        this.q = _q;
        this._observer = new EventEmitter();
        this._cache = new AOCacheService(this, this._storage);
        this._client = new FaunaDB.Client({
            secret: this._environment.faunadb.secret,
            observer: (/**
             * @param {?} res
             * @return {?}
             */
            (res) => this._observer.emit(res))
        });
    }
    /**
     * @return {?}
     */
    client() {
        return this._client;
    }
    //--------------------------------------------------------------------------------------------------------------------
    // EXPRESSION
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} table
     * @param {?=} id
     * @return {?}
     */
    Ref(table, id) {
        return id ? _q.Ref(_q.Collection(table), id) : null;
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    Get(table, id) {
        return _q.Get(_q.Ref(_q.Collection(table), id));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?=} id
     * @return {?}
     */
    Create(table, data, id = null) {
        return _q.Let({
            id: id ? id : _q.NewId()
        }, _q.Create(_q.Ref(_q.Collection(table), _q.Var('id')), {
            data: Object.assign({ is_activated: true }, data, { id: _q.Var('id'), created_at: Date.now(), updated_at: Date.now(), deleted_at: null })
        }));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?} id
     * @return {?}
     */
    Update(table, data, id) {
        return _q.Update(_q.Ref(_q.Collection(table), id), {
            data: Object.assign({}, data, { id, updated_at: Date.now() })
        });
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    Delete(table, id) {
        return _q.Delete(_q.Ref(_q.Collection(table), id));
    }
    //--------------------------------------------------------------------------------------------------------------------
    // RESOURCES
    //--------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} callback
     * @param {?=} configs
     * @return {?}
     */
    query(callback, configs = {}) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const params = callback(_q);
            /** @type {?} */
            const request = configs.cache
                ? this._cache.find(params, (/**
                 * @return {?}
                 */
                () => this.client().query(params)), configs.cache)
                : this.client().query(params);
            request.then((/**
             * @param {?} response
             * @return {?}
             */
            response => resolve(response)), (/**
             * @param {?} error
             * @return {?}
             */
            error => reject(error)));
        })));
        return this._ao.wait(promise);
    }
    /**
     * @return {?}
     */
    id() {
        return this.query((/**
         * @param {?} q
         * @return {?}
         */
        q => q.NewId()));
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    find(table, id) {
        return this.query((/**
         * @return {?}
         */
        () => this.Get(table, id)));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?=} id
     * @return {?}
     */
    insert(table, data, id = null) {
        return this.query((/**
         * @return {?}
         */
        () => this.Create(table, data, id)));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @param {?} id
     * @return {?}
     */
    upgrade(table, data, id) {
        return this.query((/**
         * @return {?}
         */
        () => this.Update(table, data, id)));
    }
    /**
     * @param {?} table
     * @param {?} data
     * @return {?}
     */
    save(table, data) {
        return data.id
            ? this.upgrade(table, data, data.id)
            : this.insert(table, data);
    }
    /**
     * @param {?} table
     * @param {?} id
     * @return {?}
     */
    destroy(table, id) {
        return this.query((/**
         * @return {?}
         */
        () => this.Delete(table, id)));
    }
}
AOFaunaDbService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOFaunaDbService.ctorParameters = () => [
    { type: AOService },
    { type: LocalStorageService },
    { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
];
/** @nocollapse */ AOFaunaDbService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AOFaunaDbService_Factory() { return new AOFaunaDbService(i0.ɵɵinject(i1.AOService), i0.ɵɵinject(i2.LocalStorageService), i0.ɵɵinject(i3.AOEnvService)); }, token: AOFaunaDbService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._client;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._cache;
    /** @type {?} */
    AOFaunaDbService.prototype.q;
    /** @type {?} */
    AOFaunaDbService.prototype._observer;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._ao;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._storage;
    /**
     * @type {?}
     * @private
     */
    AOFaunaDbService.prototype._environment;
}
//# sourceMappingURL=data:application/json;base64,