/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-auth-firebase.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable } from '@angular/core';
import { Plugins, registerWebPlugin } from '@capacitor/core';
import { OAuth2Client } from '@byteowls/capacitor-oauth2';
import * as firebase from 'firebase/app';
import { AOAuthService } from './ao-auth.service';
import { AOFirebaseService } from './ao-firebase.service';
import { AOSubscriptions } from '../utils/ao-subscriptions';
import { AOEnvService } from './ao-env.service';
import * as i0 from "@angular/core";
import * as i1 from "./ao-auth.service";
import * as i2 from "./ao-firebase.service";
import * as i3 from "./ao-env.service";
export class AOAuthFirebaseService {
    /**
     * @param {?} _auth
     * @param {?} _fb
     * @param {?} _env
     */
    constructor(_auth, _fb, _env) {
        this._auth = _auth;
        this._fb = _fb;
        this._env = _env;
        this._subscriptions = new AOSubscriptions();
        registerWebPlugin(OAuth2Client);
        this._auth.provider(this);
        this._auth.isUser() ? this.authListening() : null;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @param {?} data
     * @return {?}
     */
    login(data) {
        this._subscriptions.stop();
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                /** @type {?} */
                let oauth = null;
                /** @type {?} */
                let credential = null;
                if (data.provider instanceof firebase.auth.GoogleAuthProvider) {
                    oauth = yield this.loginGoogle();
                    credential = firebase.auth.GoogleAuthProvider.credential(null, oauth.access_token);
                }
                else if (data.provider instanceof firebase.auth.FacebookAuthProvider) {
                    oauth = yield this.loginFacebook();
                    credential = firebase.auth.FacebookAuthProvider.credential(oauth.access_token);
                }
                else if (data.provider instanceof firebase.auth.TwitterAuthProvider) {
                    oauth = yield this.loginTwitter();
                    credential = firebase.auth.TwitterAuthProvider.credential(oauth.access_token, '');
                }
                else if (data.provider instanceof firebase.auth.GithubAuthProvider) {
                    oauth = yield this.loginGithub();
                    credential = firebase.auth.GithubAuthProvider.credential(oauth.access_token);
                }
                else {
                    reject('Invalid Auth Provider.');
                }
                /** @type {?} */
                const auth = yield this._fb.auth().auth.signInWithCredential(credential);
                /** @type {?} */
                const user = yield this.userCreateOrUpdate(auth.user, {
                    given_name: oauth.given_name,
                    family_name: oauth.family_name,
                    locale: oauth.locale,
                });
                resolve(user);
            }
            catch (e) {
                reject(e);
            }
        })));
        promise.finally((/**
         * @return {?}
         */
        () => this.authListening(true)));
        return promise;
    }
    /**
     * @return {?}
     */
    logout() {
        this._subscriptions.stop();
        return this._fb.firebase().destroy().then((/**
         * @return {?}
         */
        () => this._fb.conn().logout()));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    update(data) {
        return Promise.resolve();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    forgetPassword(data) {
        return Promise.resolve();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    resetPassword(data) {
        return Promise.resolve();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updatePassword(data) {
        return Promise.resolve();
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    loginGoogle() {
        return Plugins.OAuth2Client.authenticate({
            scope: 'email profile',
            authorizationBaseUrl: 'https://accounts.google.com/o/oauth2/auth',
            resourceUrl: 'https://www.googleapis.com/userinfo/v2/me',
            accessTokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token',
            web: {
                appId: this._env.oauth.google.web,
                responseType: 'token',
                redirectUrl: this._env.app_url,
                accessTokenEndpoint: '',
                pkceEnable: false,
                windowOptions: 'height=500,left=0,top=0',
            },
            android: {
                appId: this._env.oauth.google.android,
                responseType: 'code',
                // if you configured a android app in google dev console the value must be "code"
                redirectUrl: this._env.app_id + ':/' // package name from google dev console
            },
            ios: {
                appId: this._env.oauth.google.ios,
                responseType: 'code',
                // if you configured a ios app in google dev console the value must be "code"
                redirectUrl: this._env.app_id + ':/' // Bundle ID from google dev console
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    loginFacebook() {
        return this.loginGoogle();
    }
    /**
     * @private
     * @return {?}
     */
    loginTwitter() {
        return this.loginGoogle();
    }
    /**
     * @private
     * @return {?}
     */
    loginGithub() {
        return this.loginGoogle();
    }
    /**
     * @private
     * @param {?=} skip
     * @return {?}
     */
    authListening(skip = false) {
        this._subscriptions.stop();
        this._subscriptions.auth = this._fb.authState().subscribe((/**
         * @param {?} auth
         * @return {?}
         */
        (auth) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (auth) {
                if (skip === false) {
                    skip = false;
                    yield this.userCreateOrUpdate(auth);
                }
                this._subscriptions.user = this._fb.fsDocSnapshot('/users/' + auth.uid).subscribe((/**
                 * @param {?} snapshot
                 * @return {?}
                 */
                snapshot => {
                    return snapshot.payload.exists
                        ? this._auth.setUser(snapshot.payload.data())
                        : this._auth.logout();
                }), (/**
                 * @return {?}
                 */
                () => {
                    console.warn('Oops! Failed to watch user.');
                }));
            }
            else {
                return this._auth.logout();
            }
        })), (/**
         * @return {?}
         */
        () => {
            console.warn('Oops! Failed to update authentication.');
        }));
    }
    /**
     * @private
     * @param {?} user
     * @param {?=} extra
     * @return {?}
     */
    userCreateOrUpdate(user, extra = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const userRef = this._fb.fsDoc('/users/' + user.uid);
            /** @type {?} */
            const userDoc = yield userRef.ref.get();
            /** @type {?} */
            const data = Object.assign({}, userDoc.data(), { id: user.uid, email: user.email, email_verified: user.emailVerified, name: user.displayName, image: user.photoURL, logged_at: this._fb.fsNow() }, extra);
            if (!userDoc.exists) {
                data.active = true;
                data.created_at = this._fb.fsNow();
                data.updated_at = this._fb.fsNow();
                data.deleted_at = null;
            }
            yield userRef.set(data, { merge: true });
            return (yield userRef.ref.get()).data();
        });
    }
}
AOAuthFirebaseService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOAuthFirebaseService.ctorParameters = () => [
    { type: AOAuthService },
    { type: AOFirebaseService },
    { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
];
/** @nocollapse */ AOAuthFirebaseService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AOAuthFirebaseService_Factory() { return new AOAuthFirebaseService(i0.ɵɵinject(i1.AOAuthService), i0.ɵɵinject(i2.AOFirebaseService), i0.ɵɵinject(i3.AOEnvService)); }, token: AOAuthFirebaseService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._subscriptions;
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._auth;
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._fb;
    /**
     * @type {?}
     * @private
     */
    AOAuthFirebaseService.prototype._env;
}
//# sourceMappingURL=data:application/json;base64,