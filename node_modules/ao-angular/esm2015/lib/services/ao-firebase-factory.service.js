/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase-factory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, NgZone } from '@angular/core';
import { FirebaseApp } from '@angular/fire';
import { _firebaseAppFactory } from '@angular/fire/firebase.app.module';
import { AOFirebaseConnectionService } from './ao-firebase-connection.service';
import { AOEnvService } from './ao-env.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/fire";
import * as i2 from "./ao-env.service";
export class AOFirebaseFactoryService {
    /**
     * @param {?} _app
     * @param {?} _zone
     * @param {?} _environment
     */
    constructor(_app, _zone, _environment) {
        this._app = _app;
        this._zone = _zone;
        this._environment = _environment;
        this.connections = {};
        this.factory(this._environment.firebase.name, this._environment.firebase.configs, this._app);
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    conn(name) {
        if (this.connections[name]) {
            return this.connections[name];
        }
        throw new Error('FirebaseApp(' + name + ') not found.');
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    makeHash(configs) {
        return JSON.stringify({
            projectId: configs.projectId,
            apiKey: configs.apiKey
        });
    }
    /**
     * @param {?} name
     * @param {?=} configs
     * @param {?=} app
     * @return {?}
     */
    factory(name, configs, app) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const hash = this.makeHash(configs);
            if (this.connections[name]) {
                if (this.connections[name].hash() === hash) {
                    return Promise.resolve(true);
                }
                else {
                    yield this.connections[name].destroy();
                }
            }
            if (!app) {
                app = _firebaseAppFactory((/** @type {?} */ (configs)), this._zone, name);
            }
            this.connections[name] = new AOFirebaseConnectionService(name, hash, app, this._zone);
            return Promise.resolve(true);
        });
    }
    /**
     * @param {?=} only
     * @param {?=} except
     * @return {?}
     */
    destroy(only = [], except = ['master']) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (only.length === 0) {
                only = Object.keys(this.connections);
            }
            /** @type {?} */
            const promises = [];
            Object.keys(this.connections).forEach((/**
             * @param {?} name
             * @return {?}
             */
            name => {
                if (only.indexOf(name) >= 0 && except.indexOf(name) === -1) {
                    promises.push(this.conn(name).destroy());
                }
            }));
            return Promise.all(promises).then((/**
             * @return {?}
             */
            () => true));
        });
    }
}
AOFirebaseFactoryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOFirebaseFactoryService.ctorParameters = () => [
    { type: FirebaseApp },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [AOEnvService,] }] }
];
/** @nocollapse */ AOFirebaseFactoryService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AOFirebaseFactoryService_Factory() { return new AOFirebaseFactoryService(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.AOEnvService)); }, token: AOFirebaseFactoryService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype.connections;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._app;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._zone;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseFactoryService.prototype._environment;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW8tZmlyZWJhc2UtZmFjdG9yeS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW8tYW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hby1maXJlYmFzZS1mYWN0b3J5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pELE9BQU8sRUFBQyxXQUFXLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRXRFLE9BQU8sRUFBQywyQkFBMkIsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQzdFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUs5QyxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7SUFJbkMsWUFDVSxJQUFpQixFQUNqQixLQUFhLEVBQ1MsWUFBWTtRQUZsQyxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2pCLFVBQUssR0FBTCxLQUFLLENBQVE7UUFDUyxpQkFBWSxHQUFaLFlBQVksQ0FBQTtRQUxwQyxnQkFBVyxHQUFtRCxFQUFFLENBQUM7UUFPdkUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRixDQUFDOzs7OztJQUVELElBQUksQ0FBQyxJQUFhO1FBQ2hCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0I7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7SUFFRCxRQUFRLENBQUMsT0FBMEI7UUFDakMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUztZQUM1QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07U0FDdkIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7OztJQUVLLE9BQU8sQ0FBQyxJQUFZLEVBQUUsT0FBMkIsRUFBRSxHQUFpQjs7O2tCQUNsRSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7WUFFbkMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMxQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO29CQUMxQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlCO3FCQUFNO29CQUNMLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDeEM7YUFDRjtZQUVELElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1IsR0FBRyxHQUFHLG1CQUFtQixDQUFDLG1CQUFBLE9BQU8sRUFBcUIsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzNFO1lBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLDJCQUEyQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV0RixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQztLQUFBOzs7Ozs7SUFFSyxPQUFPLENBQUMsT0FBaUIsRUFBRSxFQUFFLFNBQW1CLENBQUMsUUFBUSxDQUFDOztZQUM5RCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNyQixJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDdEM7O2tCQUVLLFFBQVEsR0FBdUIsRUFBRTtZQUV2QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzNDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDMUQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7aUJBQzFDO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFFSCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSTs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFDLENBQUM7UUFDaEQsQ0FBQztLQUFBOzs7WUEvREYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBUk8sV0FBVztZQURTLE1BQU07NENBaUI3QixNQUFNLFNBQUMsWUFBWTs7Ozs7Ozs7SUFMdEIsK0NBQXlFOzs7OztJQUd2RSx3Q0FBeUI7Ozs7O0lBQ3pCLHlDQUFxQjs7Ozs7SUFDckIsZ0RBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7RmlyZWJhc2VBcHAsIEZpcmViYXNlQXBwQ29uZmlnfSBmcm9tICdAYW5ndWxhci9maXJlJztcclxuaW1wb3J0IHtfZmlyZWJhc2VBcHBGYWN0b3J5fSBmcm9tICdAYW5ndWxhci9maXJlL2ZpcmViYXNlLmFwcC5tb2R1bGUnO1xyXG5cclxuaW1wb3J0IHtBT0ZpcmViYXNlQ29ubmVjdGlvblNlcnZpY2V9IGZyb20gJy4vYW8tZmlyZWJhc2UtY29ubmVjdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHtBT0VudlNlcnZpY2V9IGZyb20gJy4vYW8tZW52LnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQU9GaXJlYmFzZUZhY3RvcnlTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBjb25uZWN0aW9uczogeyBba2V5OiBzdHJpbmddOiBBT0ZpcmViYXNlQ29ubmVjdGlvblNlcnZpY2UgfSA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgX2FwcDogRmlyZWJhc2VBcHAsXHJcbiAgICBwcml2YXRlIF96b25lOiBOZ1pvbmUsXHJcbiAgICBASW5qZWN0KEFPRW52U2VydmljZSkgcHJpdmF0ZSBfZW52aXJvbm1lbnRcclxuICApIHtcclxuICAgIHRoaXMuZmFjdG9yeSh0aGlzLl9lbnZpcm9ubWVudC5maXJlYmFzZS5uYW1lLCB0aGlzLl9lbnZpcm9ubWVudC5maXJlYmFzZS5jb25maWdzLCB0aGlzLl9hcHApO1xyXG4gIH1cclxuXHJcbiAgY29ubihuYW1lPzogc3RyaW5nKSB7XHJcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uc1tuYW1lXSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uc1tuYW1lXTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignRmlyZWJhc2VBcHAoJyArIG5hbWUgKyAnKSBub3QgZm91bmQuJyk7XHJcbiAgfVxyXG5cclxuICBtYWtlSGFzaChjb25maWdzOiBGaXJlYmFzZUFwcENvbmZpZyk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICBwcm9qZWN0SWQ6IGNvbmZpZ3MucHJvamVjdElkLFxyXG4gICAgICBhcGlLZXk6IGNvbmZpZ3MuYXBpS2V5XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGZhY3RvcnkobmFtZTogc3RyaW5nLCBjb25maWdzPzogRmlyZWJhc2VBcHBDb25maWcsIGFwcD86IEZpcmViYXNlQXBwKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBoYXNoID0gdGhpcy5tYWtlSGFzaChjb25maWdzKTtcclxuXHJcbiAgICBpZiAodGhpcy5jb25uZWN0aW9uc1tuYW1lXSkge1xyXG4gICAgICBpZiAodGhpcy5jb25uZWN0aW9uc1tuYW1lXS5oYXNoKCkgPT09IGhhc2gpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY29ubmVjdGlvbnNbbmFtZV0uZGVzdHJveSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFhcHApIHtcclxuICAgICAgYXBwID0gX2ZpcmViYXNlQXBwRmFjdG9yeShjb25maWdzIGFzIEZpcmViYXNlQXBwQ29uZmlnLCB0aGlzLl96b25lLCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbm5lY3Rpb25zW25hbWVdID0gbmV3IEFPRmlyZWJhc2VDb25uZWN0aW9uU2VydmljZShuYW1lLCBoYXNoLCBhcHAsIHRoaXMuX3pvbmUpO1xyXG5cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBkZXN0cm95KG9ubHk6IHN0cmluZ1tdID0gW10sIGV4Y2VwdDogc3RyaW5nW10gPSBbJ21hc3RlciddKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBpZiAob25seS5sZW5ndGggPT09IDApIHtcclxuICAgICAgb25seSA9IE9iamVjdC5rZXlzKHRoaXMuY29ubmVjdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPGJvb2xlYW4+W10gPSBbXTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLmNvbm5lY3Rpb25zKS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICBpZiAob25seS5pbmRleE9mKG5hbWUpID49IDAgJiYgZXhjZXB0LmluZGV4T2YobmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmNvbm4obmFtZSkuZGVzdHJveSgpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IHRydWUpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19