/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/ao-firebase.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as firebase from 'firebase/app';
import { AOFirebaseFactoryService } from './ao-firebase-factory.service';
import * as i0 from "@angular/core";
import * as i1 from "./ao-firebase-factory.service";
export class AOFirebaseService {
    /**
     * @param {?} _firebase
     */
    constructor(_firebase) {
        this._firebase = _firebase;
        this._name = 'master';
    }
    /**
     * @return {?}
     */
    firebase() {
        return this._firebase;
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    factory(configs) {
        return this._firebase.factory(this.name(), configs);
    }
    /**
     * @return {?}
     */
    conn() {
        return this._firebase.conn(this.name());
    }
    /**
     * @return {?}
     */
    name() {
        return this._name;
    }
    /**
     * @return {?}
     */
    hash() {
        return this.conn().hash();
    }
    /**
     * @return {?}
     */
    app() {
        return this.conn().app();
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    auth() {
        return this.conn().auth();
    }
    /**
     * @return {?}
     */
    authState() {
        return this.auth().authState;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    db() {
        return this.conn().database();
    }
    /**
     * @return {?}
     */
    dbNow() {
        return firebase.database.ServerValue.TIMESTAMP;
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    fs() {
        return this.conn().firestore();
    }
    /**
     * @return {?}
     */
    fsId() {
        return this.fs().createId();
    }
    /**
     * @template T
     * @param {?} path
     * @return {?}
     */
    fsDoc(path) {
        return this.fs().doc(path);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    fsDocValue(path) {
        return this.fsDoc(path).valueChanges();
    }
    /**
     * @param {?} path
     * @return {?}
     */
    fsDocSnapshot(path) {
        return this.fs().doc(path).snapshotChanges();
    }
    /**
     * @param {?} path
     * @param {?} data
     * @param {?=} options
     * @return {?}
     */
    fsDocSet(path, data, options = { merge: true }) {
        return this.fs().doc(path).set(data, options);
    }
    /**
     * @template T
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsCol(path, queryFn) {
        return this.fs().collection(path, queryFn);
    }
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsColValues(path, queryFn) {
        return this.fsCol(path, queryFn).valueChanges();
    }
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsColSnapshot(path, queryFn) {
        return this.fsCol(path, queryFn).snapshotChanges();
    }
    /**
     * @param {?} path
     * @param {?=} queryFn
     * @return {?}
     */
    fsColState(path, queryFn) {
        return this.fsCol(path, queryFn).stateChanges();
    }
    /**
     * @return {?}
     */
    fsBatch() {
        return this.fs().firestore.batch();
    }
    /**
     * @return {?}
     */
    fsNow() {
        return firebase.firestore.FieldValue.serverTimestamp();
    }
    /**
     * @return {?}
     */
    fsTimestamp() {
        return firebase.firestore.Timestamp;
    }
    // fsToMilliseconds(item, field) {
    //   if (item[field] instanceof Timestamp) {
    //     item[field] = (new Date(item[field].seconds * 1000 + item[field].nanoseconds / 1000000)).getTime();
    //   }
    // }
    // fsAddMilliseconds(date) {
    //   date.milliseconds = (new Date(date.seconds * 1000 + date.nanoseconds / 1000000)).getTime();
    //   return date;
    // }
    // fsTransaction<T>(updateFunction: (transaction: firebase.firestore.Timestamp) => Promise<T>): Promise<T> {
    //   return this.fs().firestore.runTransaction(updateFunction);
    // }
    // fsCounter(path, field = 'count', qt = 1) {
    //   return this.fsTransaction(transaction => {
    //     const ref = this.fsDoc(path).ref;
    //     return transaction.get(ref).then((doc) => {
    //
    //       const update = {};
    //
    //       if (doc.exists) {
    //         const value = parseInt(doc.get(field), 10);
    //         qt = value >= 0 || value <= 0 ? qt + value : qt;
    //       }
    //
    //       update[field] = qt;
    //
    //       transaction.set(ref, update, {merge: true});
    //
    //     });
    //   });
    // }
    // fsUp(path, field = 'count') {
    //   return this.fsCounter(path, field, 1);
    // }
    // fsDown(path, field = 'count') {
    //   return this.fsCounter(path, field, -1);
    // }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    msn() {
        return this.conn().messaging();
    }
    // -------------------------------------------------------------------------------------------------------------------
    /**
     * @return {?}
     */
    disk() {
        return this.conn().storage();
    }
}
AOFirebaseService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AOFirebaseService.ctorParameters = () => [
    { type: AOFirebaseFactoryService }
];
/** @nocollapse */ AOFirebaseService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AOFirebaseService_Factory() { return new AOFirebaseService(i0.ɵɵinject(i1.AOFirebaseFactoryService)); }, token: AOFirebaseService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AOFirebaseService.prototype._name;
    /**
     * @type {?}
     * @private
     */
    AOFirebaseService.prototype._firebase;
}
//# sourceMappingURL=data:application/json;base64,