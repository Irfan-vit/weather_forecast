{"ast":null,"code":"import _slicedToArray from \"/home/sagewizard/Documents/GitHub/weather_forecast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// custom hook to fetch weather data\nimport { useState, useEffect } from \"react\";\nimport useGeolocation from \"../utilities/useGeolocation\";\nexport function useGeoWeather() {\n  _s();\n\n  var location = useGeolocation();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1]; // effect to clear localstorage after every 2hrs\n\n\n  useEffect(function () {\n    var hours = 2;\n    var now = new Date().getTime();\n    var setupTime = localStorage.getItem(\"setupTime\");\n\n    if (setupTime === null) {\n      localStorage.setItem(\"setupTime\", now);\n    } else {\n      if (now - setupTime > hours * 60 * 60 * 1000) {\n        console.log(\"clearing console\");\n        localStorage.clear();\n        localStorage.setItem(\"setupTime\", now);\n      }\n    }\n  }, []);\n  useEffect(function () {\n    if (location) {\n      // get data from localStorage if already stored\n      if (localStorage.getItem(\"app:react-weather\")) {\n        console.log(\"YAY!!!\");\n\n        var _data = JSON.parse(localStorage.getItem(\"app:react-weather\"));\n\n        console.log(\"localstorage\", _data);\n        setData(_data);\n        return;\n      } else {\n        console.log(\"NAH!!!\");\n        fetch(\"https://api.openweathermap.org/data/2.5/forecast?lat=\".concat(location.latitude, \"&lon=\").concat(location.longitude, \"&appid=c7cec94be5f48433614a71099719a8e4&units=metric\")).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          // store data in localStorage\n          localStorage.setItem(\"app:react-weather\", JSON.stringify(data));\n          setData(data);\n        });\n      }\n    }\n  }, [location]);\n  return data;\n}\n\n_s(useGeoWeather, \"SD12SfLuHdRwV+L1CgC6WcOo374=\", false, function () {\n  return [useGeolocation];\n});\n\nexport function useQueryWeather(query) {\n  _s2();\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    if (query) {\n      fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\".concat(query, \"&appid=c7cec94be5f48433614a71099719a8e4&units=metric\")).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        setData(result);\n      });\n    }\n  }, [query]);\n  return data;\n}\n\n_s2(useQueryWeather, \"fQZRxy/+nAZ7NLS1X4dVhrlp8Go=\");","map":{"version":3,"sources":["/home/sagewizard/Documents/GitHub/weather_forecast/src/utilities/useWeather.js"],"names":["useState","useEffect","useGeolocation","useGeoWeather","location","data","setData","hours","now","Date","getTime","setupTime","localStorage","getItem","setItem","console","log","clear","JSON","parse","fetch","latitude","longitude","then","res","json","stringify","useQueryWeather","query","result"],"mappings":";;;;;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEA,OAAO,SAASC,aAAT,GAAyB;AAAA;;AAC9B,MAAIC,QAAQ,GAAGF,cAAc,EAA7B;;AACA,kBAAwBF,QAAQ,CAAC,IAAD,CAAhC;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAaC,OAAb,iBAF8B,CAI9B;;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,KAAK,GAAG,CAAZ;AACA,QAAIC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAV;AACA,QAAIC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAhB;;AACA,QAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtBC,MAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCN,GAAlC;AACD,KAFD,MAEO;AACL,UAAIA,GAAG,GAAGG,SAAN,GAAkBJ,KAAK,GAAG,EAAR,GAAa,EAAb,GAAkB,IAAxC,EAA8C;AAC5CQ,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAJ,QAAAA,YAAY,CAACK,KAAb;AACAL,QAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCN,GAAlC;AACD;AACF;AACF,GAbQ,EAaN,EAbM,CAAT;AAeAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIG,QAAJ,EAAc;AACZ;AACA,UAAIQ,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAJ,EAA+C;AAC7CE,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,YAAIX,KAAI,GAAGa,IAAI,CAACC,KAAL,CAAWP,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAAX;;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,KAA5B;AACAC,QAAAA,OAAO,CAACD,KAAD,CAAP;AACA;AACD,OAND,MAMO;AACLU,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAI,QAAAA,KAAK,gEAEDhB,QAAQ,CAACiB,QAFR,kBAIDjB,QAAQ,CAACkB,SAJR,0DAAL,CAOGC,IAPH,CAOQ,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,SAPX,EAQGF,IARH,CAQQ,UAAAlB,IAAI,EAAI;AACZ;AACAO,UAAAA,YAAY,CAACE,OAAb,CAAqB,mBAArB,EAA0CI,IAAI,CAACQ,SAAL,CAAerB,IAAf,CAA1C;AACAC,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD,SAZH;AAaD;AACF;AACF,GA1BQ,EA0BN,CAACD,QAAD,CA1BM,CAAT;AA2BA,SAAOC,IAAP;AACD;;GAhDeF,a;UACCD,c;;;AAiDjB,OAAO,SAASyB,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AACrC,mBAAwB5B,QAAQ,CAAC,IAAD,CAAhC;AAAA;AAAA,MAAOK,IAAP;AAAA,MAAaC,OAAb;;AACAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,KAAJ,EAAW;AACTR,MAAAA,KAAK,8DACmDQ,KADnD,0DAAL,CAGGL,IAHH,CAGQ,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OAHX,EAIGF,IAJH,CAIQ,UAAAM,MAAM,EAAI;AACdvB,QAAAA,OAAO,CAACuB,MAAD,CAAP;AACD,OANH;AAOD;AACF,GAVQ,EAUN,CAACD,KAAD,CAVM,CAAT;AAWA,SAAOvB,IAAP;AACD;;IAdesB,e","sourcesContent":["// custom hook to fetch weather data\nimport { useState, useEffect } from \"react\";\nimport useGeolocation from \"../utilities/useGeolocation\";\n\nexport function useGeoWeather() {\n  let location = useGeolocation();\n  const [data, setData] = useState(null);\n\n  // effect to clear localstorage after every 2hrs\n  useEffect(() => {\n    let hours = 2;\n    let now = new Date().getTime();\n    let setupTime = localStorage.getItem(\"setupTime\");\n    if (setupTime === null) {\n      localStorage.setItem(\"setupTime\", now);\n    } else {\n      if (now - setupTime > hours * 60 * 60 * 1000) {\n        console.log(\"clearing console\");\n        localStorage.clear();\n        localStorage.setItem(\"setupTime\", now);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (location) {\n      // get data from localStorage if already stored\n      if (localStorage.getItem(\"app:react-weather\")) {\n        console.log(\"YAY!!!\");\n        let data = JSON.parse(localStorage.getItem(\"app:react-weather\"));\n        console.log(\"localstorage\", data);\n        setData(data);\n        return;\n      } else {\n        console.log(\"NAH!!!\");\n        fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${\n            location.latitude\n          }&lon=${\n            location.longitude\n          }&appid=c7cec94be5f48433614a71099719a8e4&units=metric`\n        )\n          .then(res => res.json())\n          .then(data => {\n            // store data in localStorage\n            localStorage.setItem(\"app:react-weather\", JSON.stringify(data));\n            setData(data);\n          });\n      }\n    }\n  }, [location]);\n  return data;\n}\n\nexport function useQueryWeather(query) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    if (query) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${query}&appid=c7cec94be5f48433614a71099719a8e4&units=metric`\n      )\n        .then(res => res.json())\n        .then(result => {\n          setData(result);\n        });\n    }\n  }, [query]);\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}